# Fix building without Safe Browsing on Windows
# This also removes other unnecessary services that depend on Safe Browsing, such as Chrome Cleaner

--- a/.gn
+++ b/.gn
@@ -523,7 +523,6 @@ check_targets = [
   "//third_party/rnnoise/*",
   "//third_party/robolectric/*",
   "//third_party/s2cellid/*",
-  "//third_party/safe_browsing/*",
   "//third_party/scan-build/*",
 
   # "//third_party/sfntly/*",  # 20ish errors
--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -116,7 +116,6 @@
   X("renderer_host")                                                     \
   X("renderer.scheduler")                                                \
   X("RLZ")                                                               \
-  X("safe_browsing")                                                     \
   X("screenlock_monitor")                                                \
   X("sequence_manager")                                                  \
   X("service_manager")                                                   \
--- a/base/trace_event/memory_infra_background_whitelist.cc
+++ b/base/trace_event/memory_infra_background_whitelist.cc
@@ -233,18 +233,7 @@ const char* const kAllocatorDumpNameWhit
     "net/url_request_context/proxy/0x?/http_cache/memory_backend",
     "net/url_request_context/proxy/0x?/http_cache/simple_backend",
     "net/url_request_context/proxy/0x?/http_network_session",
-    "net/url_request_context/safe_browsing",
-    "net/url_request_context/safe_browsing/0x?",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/cookies",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
-    "tasks_pending_global",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
     "tasks_pending_for_key",
-    "net/url_request_context/safe_browsing/0x?/http_cache",
-    "net/url_request_context/safe_browsing/0x?/http_cache/memory_backend",
-    "net/url_request_context/safe_browsing/0x?/http_cache/simple_backend",
-    "net/url_request_context/safe_browsing/0x?/http_network_session",
     "net/url_request_context/system",
     "net/url_request_context/system/0x?",
     "net/url_request_context/system/0x?/cookie_monster",
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -49,10 +49,7 @@ source_set("chrome_dll_resources") {
   ]
 
   if (is_win) {
-    sources += [
-      "chrome_dll.rc",
-      "etw_events/chrome_events_win.rc",
-    ]
+    sources += [ "chrome_dll.rc" ]
 
     deps += [
       "//build:branding_buildflags",
@@ -380,7 +377,6 @@ source_set("chrome_content_browser_overl
     "//components/metrics/public/mojom:call_stack_mojo_bindings",
     "//components/page_load_metrics/common:page_load_metrics_mojom",
     "//components/rappor/public/mojom",
-    "//components/safe_browsing/common:interfaces",
     "//components/services/heap_profiling/public/mojom",
     "//components/translate/content/common",
     "//extensions/buildflags",
--- a/chrome/app/chrome_content_browser_overlay_manifest.cc
+++ b/chrome/app/chrome_content_browser_overlay_manifest.cc
@@ -27,7 +27,6 @@
 #include "components/metrics/public/mojom/call_stack_profile_collector.mojom.h"
 #include "components/page_load_metrics/common/page_load_metrics.mojom.h"
 #include "components/rappor/public/mojom/rappor_recorder.mojom.h"
-#include "components/safe_browsing/common/safe_browsing.mojom.h"
 #include "components/translate/content/common/translate.mojom.h"
 #include "extensions/buildflags/buildflags.h"
 #include "services/service_manager/public/cpp/manifest_builder.h"
@@ -81,8 +80,7 @@ const service_manager::Manifest& GetChro
 #if defined(OS_WIN)
                               mojom::ModuleEventSink,
 #endif
-                              rappor::mojom::RapporRecorder,
-                              safe_browsing::mojom::SafeBrowsing>())
+                              rappor::mojom::RapporRecorder>())
         .RequireCapability("ash", "system_ui")
         .RequireCapability("ash", "test")
         .RequireCapability("ash", "display")
--- a/chrome/app/chromium_strings.grd
+++ b/chrome/app/chromium_strings.grd
@@ -439,14 +439,6 @@ Chromium is unable to recover your setti
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> may be dangerous, so Chromium has blocked it.
       </message>
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chromium has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chromium has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
          desc="Message shown to the user on chrome://downloads page to explain that this download is blocked because it is malware.">
         This file is dangerous, so Chromium has blocked it.
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -1607,14 +1607,6 @@ are declared in tools/grit/grit_rule.gni
           Extensions, apps, and themes can harm your computer. Are you sure you want to continue?
         </message>
       </if>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> is not commonly downloaded and may be dangerous.
-      </message>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing. This variant is shown when the user is enrolled in the Advanced Protection program.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> was blocked by Advanced Protection.
-      </message>
       <message name="IDS_PROMPT_DEEP_SCANNING_DOWNLOAD"
         desc="Message shown in the download shelf when a download is being scanned">
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> is being scanned.
@@ -2124,17 +2116,6 @@ are declared in tools/grit/grit_rule.gni
         </message>
       </if>
 
-      <!-- Dialog that asks whether user wants to participate in Safe Browsing Extended Reporting -->
-      <message name="IDS_FEEDBACK_SERVICE_DIALOG_EXPLANATION_SCOUT" desc="Explanation of the dialog asking whether the user wants to upload some system information and page content for Safe Browsing analysis">
-        You can help improve Safe Browsing by sending some system information and page content to Google.
-      </message>
-      <message name="IDS_FEEDBACK_SERVICE_DIALOG_OK_BUTTON_LABEL" desc="Button that elects to upload suspected malicious files for analysis">
-        Yes, I want to help
-      </message>
-      <message name="IDS_FEEDBACK_SERVICE_DIALOG_CANCEL_BUTTON_LABEL" desc="Button that elects not to upload suspected malicious files for analysis (default button)">
-        No, thanks
-      </message>
-
       <!-- Ambient badge -->
       <if expr="is_android">
         <message name="IDS_AMBIENT_BADGE_INSTALL" desc="String for the ambient badge promoting an app installation">
--- a/chrome/app/google_chrome_strings.grd
+++ b/chrome/app/google_chrome_strings.grd
@@ -450,14 +450,6 @@ Google Chrome is unable to recover your
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> may be dangerous, so Chrome has blocked it.
       </message>
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chrome has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chrome has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
          desc="Message shown to the user on chrome://downloads page to explain that this download is blocked because it is malware.">
         This file is dangerous, so Chrome has blocked it.
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -337,10 +337,6 @@ jumbo_static_library("browser") {
     "component_updater/ssl_error_assistant_component_installer.h",
     "component_updater/sth_set_component_remover.cc",
     "component_updater/sth_set_component_remover.h",
-    "component_updater/subresource_filter_component_installer.cc",
-    "component_updater/subresource_filter_component_installer.h",
-    "component_updater/sw_reporter_installer_win.cc",
-    "component_updater/sw_reporter_installer_win.h",
     "consent_auditor/consent_auditor_factory.cc",
     "consent_auditor/consent_auditor_factory.h",
     "content_index/content_index_metrics.cc",
@@ -1927,7 +1923,6 @@ jumbo_static_library("browser") {
   allow_circular_includes_from = [
     "//chrome/browser/ui",
     "//chrome/browser/ui/webui/bluetooth_internals",
-    "//chrome/browser/safe_browsing",
   ]
 
   public_deps = [
@@ -1981,7 +1976,6 @@ jumbo_static_library("browser") {
     "//chrome/browser/reputation:proto",
     "//chrome/browser/resource_coordinator:mojo_bindings",
     "//chrome/browser/resource_coordinator:tab_manager_features",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ssl:proto",
     "//chrome/browser/touch_to_fill",
     "//chrome/browser/ui",
@@ -2090,7 +2084,6 @@ jumbo_static_library("browser") {
     "//components/rappor:rappor_recorder",
     "//components/renderer_context_menu",
     "//components/resources",
-    "//components/safe_browsing:public",
     "//components/safe_search_api",
     "//components/safe_search_api:safe_search_client",
     "//components/search",
@@ -3880,8 +3873,6 @@ jumbo_static_library("browser") {
     ]
     deps += [
       ":chrome_process_finder",
-      "//chrome/browser/safe_browsing/chrome_cleaner",
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/chrome_elf:constants",
       "//chrome/chrome_elf:dll_hash",
@@ -3904,8 +3895,6 @@ jumbo_static_library("browser") {
       "//ui/aura_extra",
       "//ui/base:fullscreen_win",
     ]
-    allow_circular_includes_from +=
-        [ "//chrome/browser/safe_browsing/chrome_cleaner" ]
 
     all_dependent_configs = [ ":browser_win_linker_flags" ]
 
@@ -4223,7 +4212,7 @@ jumbo_static_library("browser") {
     ]
   }
 
-  if (is_win || is_mac || (is_linux && !is_chromeos)) {
+  if (false) {
     sources += [
       "password_manager/password_store_signin_notifier_impl.cc",
       "password_manager/password_store_signin_notifier_impl.h",
@@ -5479,15 +5468,6 @@ grit("resources") {
       "//chrome/browser/resources/chromeos/internet_detail_dialog:build",
     ]
   }
-
-  if (safe_browsing_mode > 0) {
-    deps +=
-        [ "//chrome/browser/resources/safe_browsing:make_file_types_protobuf" ]
-  }
-
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/browser/ui/webui/reset_password:mojo_bindings_js" ]
-  }
 }
 
 if (is_chrome_branded) {
@@ -5629,7 +5609,6 @@ static_library("test_support") {
 
   public_deps = [
     ":browser",
-    "//chrome/browser/safe_browsing:test_support",
     "//chrome/browser/ui:test_support",
   ]
   deps = [
@@ -5637,14 +5616,12 @@ static_library("test_support") {
     "//chrome/browser",
     "//chrome/browser/subresource_filter:test_support",
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/browser_sync:test_support",
     "//components/invalidation/impl",
     "//components/invalidation/impl:test_support",
     "//components/password_manager/core/browser:test_support",
     "//components/policy/core/browser:test_support",
     "//components/prefs:test_support",
-    "//components/safe_browsing:csd_proto",
     "//components/search_engines:test_support",
     "//components/services/unzip/content",
     "//components/sessions:test_support",
@@ -5827,26 +5804,6 @@ static_library("test_support") {
     ]
   }
 
-  if (safe_browsing_mode != 0) {
-    # "Safe Browsing Basic" files used for safe browsing in full mode
-    # (safe_browsing=1) and mobile (=2)
-    sources += [
-      "safe_browsing/certificate_reporting_service_test_utils.cc",
-      "safe_browsing/certificate_reporting_service_test_utils.h",
-      "safe_browsing/mock_report_sender.cc",
-      "safe_browsing/mock_report_sender.h",
-    ]
-  }
-
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "extensions/fake_safe_browsing_database_manager.cc",
-      "extensions/fake_safe_browsing_database_manager.h",
-      "safe_browsing/cloud_content_scanning/fake_deep_scanning_dialog_delegate.cc",
-      "safe_browsing/cloud_content_scanning/fake_deep_scanning_dialog_delegate.h",
-    ]
-  }
-
   if (has_spellcheck_panel) {
     sources += [
       "spellchecker/test/spellcheck_mock_panel_host.cc",
--- a/chrome/browser/DEPS
+++ b/chrome/browser/DEPS
@@ -194,7 +194,6 @@ include_rules = [
   "+components/remote_cocoa/common",
   "+components/renderer_context_menu",
   "+components/rlz",
-  "+components/safe_browsing",
   "+components/safe_search_api",
   "+components/search",
   "+components/search_engines",
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -100,7 +100,6 @@
 #include "components/previews/core/previews_features.h"
 #include "components/previews/core/previews_switches.h"
 #include "components/printing/browser/features.h"
-#include "components/safe_browsing/features.h"
 #include "components/security_interstitials/core/features.h"
 #include "components/security_state/core/features.h"
 #include "components/security_state/core/security_state.h"
@@ -3872,10 +3871,6 @@ const FeatureEntry kFeatureEntries[] = {
     {"overlay-new-layout", flag_descriptions::kOverlayNewLayoutName,
      flag_descriptions::kOverlayNewLayoutDescription, kOsAndroid,
      FEATURE_VALUE_TYPE(chrome::android::kOverlayNewLayout)},
-    {"safe-browsing-use-local-blacklists-v2",
-     flag_descriptions::kSafeBrowsingUseLocalBlacklistsV2Name,
-     flag_descriptions::kSafeBrowsingUseLocalBlacklistsV2Description,
-     kOsAndroid, FEATURE_VALUE_TYPE(safe_browsing::kUseLocalBlacklistsV2)},
 #endif  // defined(OS_ANDROID)
 
 #if defined(OS_CHROMEOS)
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -202,11 +202,6 @@ class BrowserProcess {
   // on this platform (or this is a unit test).
   virtual StatusTray* status_tray() = 0;
 
-  // Returns the service providing versioned storage for rules used by the Safe
-  // Browsing subresource filter.
-  virtual subresource_filter::RulesetService*
-  subresource_filter_ruleset_service() = 0;
-
   // Returns the service used to provide hints for what optimizations can be
   // performed on slow page loads.
   virtual optimization_guide::OptimizationGuideService*
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -108,7 +108,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/rappor/public/rappor_utils.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/safe_browsing_service_interface.h"
 #include "components/sessions/core/session_id_generator.h"
 #include "components/subresource_filter/content/browser/ruleset_service.h"
 #include "components/subresource_filter/core/browser/subresource_filter_constants.h"
@@ -965,14 +964,6 @@ StatusTray* BrowserProcessImpl::status_t
   return status_tray_.get();
 }
 
-subresource_filter::RulesetService*
-BrowserProcessImpl::subresource_filter_ruleset_service() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!created_subresource_filter_ruleset_service_)
-    CreateSubresourceFilterRulesetService();
-  return subresource_filter_ruleset_service_.get();
-}
-
 optimization_guide::OptimizationGuideService*
 BrowserProcessImpl::optimization_guide_service() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
@@ -1220,40 +1211,6 @@ void BrowserProcessImpl::CreateBackgroun
 #endif
 }
 
-void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
-  DCHECK(!subresource_filter_ruleset_service_);
-  created_subresource_filter_ruleset_service_ = true;
-
-  if (!base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter)) {
-    return;
-  }
-
-  // Runner for tasks critical for user experience.
-  scoped_refptr<base::SequencedTaskRunner> blocking_task_runner(
-      base::CreateSequencedTaskRunner(
-          {base::ThreadPool(), base::MayBlock(),
-           base::TaskPriority::USER_BLOCKING,
-           base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN}));
-
-  // Runner for tasks that do not influence user experience.
-  scoped_refptr<base::SequencedTaskRunner> background_task_runner(
-      base::CreateSequencedTaskRunner(
-          {base::ThreadPool(), base::MayBlock(),
-           base::TaskPriority::BEST_EFFORT,
-           base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN}));
-
-  base::FilePath user_data_dir;
-  base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
-  base::FilePath indexed_ruleset_base_dir =
-      user_data_dir.Append(subresource_filter::kTopLevelDirectoryName)
-          .Append(subresource_filter::kIndexedRulesetBaseDirectoryName);
-  subresource_filter_ruleset_service_ =
-      std::make_unique<subresource_filter::RulesetService>(
-          local_state(), background_task_runner, indexed_ruleset_base_dir,
-          blocking_task_runner);
-}
-
 void BrowserProcessImpl::CreateOptimizationGuideService() {
   DCHECK(!created_optimization_guide_service_);
   DCHECK(!optimization_guide_service_);
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -165,8 +165,6 @@ class BrowserProcessImpl : public Browse
   void set_background_mode_manager_for_test(
       std::unique_ptr<BackgroundModeManager> manager) override;
   StatusTray* status_tray() override;
-  subresource_filter::RulesetService* subresource_filter_ruleset_service()
-      override;
   optimization_guide::OptimizationGuideService* optimization_guide_service()
       override;
 
@@ -211,8 +209,6 @@ class BrowserProcessImpl : public Browse
   void CreateNotificationUIManager();
   void CreatePrintPreviewDialogController();
   void CreateBackgroundPrintingManager();
-  void CreateSafeBrowsingService();
-  void CreateSubresourceFilterRulesetService();
   void CreateOptimizationGuideService();
   void CreateStatusTray();
   void CreateBackgroundModeManager();
--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -94,9 +94,6 @@
       <include name="IDR_DOMAIN_RELIABILITY_INTERNALS_HTML" file="resources\domain_reliability_internals\domain_reliability_internals.html" compress="gzip" type="BINDATA" />
       <include name="IDR_DOMAIN_RELIABILITY_INTERNALS_CSS" file="resources\domain_reliability_internals\domain_reliability_internals.css" compress="gzip" type="BINDATA" />
       <include name="IDR_DOMAIN_RELIABILITY_INTERNALS_JS" file="resources\domain_reliability_internals\domain_reliability_internals.js" compress="gzip" type="BINDATA" />
-      <if expr="safe_browsing_mode != 0">
-        <include name="IDR_DOWNLOAD_FILE_TYPES_PB" file="${root_gen_dir}\chrome\browser\resources\safe_browsing\download_file_types.pb" use_base_dir="false" type="BINDATA" />
-      </if>
       <include name="IDR_DOWNLOAD_INTERNALS_HTML" file="resources\download_internals\download_internals.html" flattenhtml="true" allowexternalscript="true" type="BINDATA" compress="gzip" />
       <include name="IDR_DOWNLOAD_INTERNALS_CSS" file="resources\download_internals\download_internals.css" type="BINDATA" compress="gzip" />
       <include name="IDR_DOWNLOAD_INTERNALS_JS" file="resources\download_internals\download_internals.js" type="BINDATA" compress="gzip" />
@@ -497,11 +494,6 @@
         <include name="IDR_ASSISTANT_LOGO_PNG" file="resources\chromeos\assistant_optin\assistant_logo.png" type="BINDATA" />
         <include name="IDR_SUPERVISION_ICON_PNG" file="resources\chromeos\supervision\supervision_icon.png" type="BINDATA" />
       </if>
-      <if expr="safe_browsing_mode == 1">
-        <include name="IDR_RESET_PASSWORD_HTML" file="resources\reset_password\reset_password.html" type="BINDATA" compress="gzip" />
-        <include name="IDR_RESET_PASSWORD_JS" file="resources\reset_password\reset_password.js" type="BINDATA" compress="gzip" />
-        <include name="IDR_RESET_PASSWORD_MOJOM_LITE_JS" file="${root_gen_dir}\chrome\browser\ui\webui\reset_password\reset_password.mojom-lite.js" use_base_dir="false" type="BINDATA" compress="gzip" />
-      </if>
       <if expr="not is_android">
         <include name="IDR_TAB_RANKER_EXAMPLE_PREPROCESSOR_CONFIG_PB" file="resource_coordinator\tab_ranker\example_preprocessor_config.pb" type="BINDATA" />
         <include name="IDR_TAB_RANKER_PAIRWISE_EXAMPLE_PREPROCESSOR_CONFIG_PB" file="resource_coordinator\tab_ranker\pairwise_preprocessor_config.pb" type="BINDATA" />
--- a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate_unittest.cc
+++ b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate_unittest.cc
@@ -49,7 +49,6 @@
 #include "chrome/browser/permissions/adaptive_quiet_notification_permission_ui_enabler.h"
 #include "chrome/browser/permissions/permission_decision_auto_blocker.h"
 #include "chrome/browser/permissions/permission_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/chrome_ssl_host_state_delegate.h"
 #include "chrome/browser/ssl/chrome_ssl_host_state_delegate_factory.h"
 #include "chrome/browser/storage/durable_storage_permission_context.h"
@@ -89,7 +88,6 @@
 #include "components/password_manager/core/browser/password_store_consumer.h"
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/verdict_cache_manager.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browsing_data_filter_builder.h"
 #include "content/public/browser/browsing_data_remover.h"
@@ -318,46 +316,6 @@ class RemoveCookieTester {
   DISALLOW_COPY_AND_ASSIGN(RemoveCookieTester);
 };
 
-class RemoveSafeBrowsingCookieTester : public RemoveCookieTester {
- public:
-  RemoveSafeBrowsingCookieTester()
-      : browser_process_(TestingBrowserProcess::GetGlobal()) {
-    // TODO(crbug/925153): Port consumers of the |sb_service| to use the
-    // interface in components/safe_browsing, and remove this cast.
-    scoped_refptr<safe_browsing::SafeBrowsingService> sb_service =
-        static_cast<safe_browsing::SafeBrowsingService*>(
-            safe_browsing::SafeBrowsingService::CreateSafeBrowsingService());
-    browser_process_->SetSafeBrowsingService(sb_service.get());
-    sb_service->Initialize();
-    base::RunLoop().RunUntilIdle();
-
-    // Make sure the safe browsing cookie store has no cookies.
-    // TODO(mmenke): Is this really needed?
-    base::RunLoop run_loop;
-    mojo::Remote<network::mojom::CookieManager> cookie_manager;
-    sb_service->GetNetworkContext()->GetCookieManager(
-        cookie_manager.BindNewPipeAndPassReceiver());
-    cookie_manager->DeleteCookies(
-        network::mojom::CookieDeletionFilter::New(),
-        base::BindLambdaForTesting(
-            [&](uint32_t num_deleted) { run_loop.Quit(); }));
-    run_loop.Run();
-
-    SetCookieManager(std::move(cookie_manager));
-  }
-
-  virtual ~RemoveSafeBrowsingCookieTester() {
-    browser_process_->safe_browsing_service()->ShutDown();
-    base::RunLoop().RunUntilIdle();
-    browser_process_->SetSafeBrowsingService(nullptr);
-  }
-
- private:
-  TestingBrowserProcess* browser_process_;
-
-  DISALLOW_COPY_AND_ASSIGN(RemoveSafeBrowsingCookieTester);
-};
-
 class RemoveHistoryTester {
  public:
   RemoveHistoryTester() {}
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -249,7 +249,6 @@
 #include "base/trace_event/trace_event_etw_export_win.h"
 #include "base/win/win_util.h"
 #include "chrome/browser/chrome_browser_main_win.h"
-#include "chrome/browser/component_updater/sw_reporter_installer_win.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/component_updater/third_party_module_list_component_installer_win.h"
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
@@ -495,7 +494,6 @@ void RegisterComponentsForUpdate(bool is
   whitelist_installer->RegisterComponents();
 #endif
 
-  RegisterSubresourceFilterComponent(cus);
   RegisterOnDeviceHeadSuggestComponent(
       cus, g_browser_process->GetApplicationLocale());
   RegisterOptimizationHintsComponent(cus, is_off_the_record_profile,
@@ -536,7 +534,6 @@ void RegisterComponentsForUpdate(bool is
   // on chromium build bots, it is always registered here and
   // RegisterSwReporterComponent() has support for running only in official
   // builds or tests.
-  RegisterSwReporterComponent(cus);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   RegisterThirdPartyModuleListComponent(cus);
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
@@ -1250,12 +1247,6 @@ void ChromeBrowserMainParts::PreBrowserS
   // other services to start up before we start adjusting the oom priority.
   g_browser_process->GetTabManager()->Start();
 #endif
-
-  // The RulesetService will make the filtering rules available to renderers
-  // immediately after its construction, provided that the rules are already
-  // available at no cost in an indexed format. This enables activating
-  // subresource filtering, if needed, also for page loads on start-up.
-  g_browser_process->subresource_filter_ruleset_service();
 }
 
 void ChromeBrowserMainParts::PostBrowserStart() {
--- a/chrome/browser/chrome_browser_main_win.cc
+++ b/chrome/browser/chrome_browser_main_win.cc
@@ -43,9 +43,6 @@
 #include "chrome/browser/first_run/first_run.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/profiles/profile_shortcut_manager.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_util_win.h"
 #include "chrome/browser/ui/simple_message_box.h"
 #include "chrome/browser/ui/uninstall_browser_prompt.h"
 #include "chrome/browser/win/browser_util.h"
@@ -426,15 +423,6 @@ void ShowCloseBrowserFirstMessageBox() {
       l10n_util::GetStringUTF16(IDS_UNINSTALL_CLOSE_APP));
 }
 
-void MaybePostSettingsResetPrompt() {
-  if (base::FeatureList::IsEnabled(safe_browsing::kSettingsResetPrompt)) {
-    base::PostTask(
-        FROM_HERE,
-        {content::BrowserThread::UI, base::TaskPriority::BEST_EFFORT},
-        base::Bind(safe_browsing::MaybeShowSettingsResetPromptWithDelay));
-  }
-}
-
 // This error message is not localized because we failed to load the
 // localization data files.
 const char kMissingLocaleDataTitle[] = "Missing File Error";
@@ -593,23 +581,6 @@ void ChromeBrowserMainPartsWin::PostBrow
 
   InitializeChromeElf();
 
-  // Reset settings for the current profile if it's tagged to be reset after a
-  // complete run of the Chrome Cleanup tool. If post-cleanup settings reset is
-  // enabled, we delay checks for settings reset prompt until the scheduled
-  // reset is finished.
-  if (safe_browsing::PostCleanupSettingsResetter::IsEnabled()) {
-    // Using last opened profiles, because we want to find reset the profile
-    // that was open in the last Chrome run, which may not be open yet in
-    // the current run.
-    safe_browsing::PostCleanupSettingsResetter().ResetTaggedProfiles(
-        g_browser_process->profile_manager()->GetLastOpenedProfiles(),
-        base::BindOnce(&MaybePostSettingsResetPrompt),
-        std::make_unique<
-            safe_browsing::PostCleanupSettingsResetter::Delegate>());
-  } else {
-    MaybePostSettingsResetPrompt();
-  }
-
   // Record UMA data about whether the fault-tolerant heap is enabled.
   // Use a delayed task to minimize the impact on startup time.
   base::PostDelayedTask(FROM_HERE, {content::BrowserThread::UI},
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -112,12 +112,6 @@
 #include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
 #include "chrome/browser/renderer_preferences_util.h"
 #include "chrome/browser/resource_coordinator/background_tab_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
-#include "chrome/browser/safe_browsing/url_checker_delegate_impl.h"
 #include "chrome/browser/search/search.h"
 #include "chrome/browser/sessions/session_tab_helper.h"
 #include "chrome/browser/sharing/sms/sms_remote_fetcher.h"
@@ -230,12 +224,7 @@
 #include "components/previews/core/previews_switches.h"
 #include "components/rappor/public/rappor_utils.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/browser/browser_url_loader_throttle.h"
-#include "components/safe_browsing/browser/url_checker_delegate.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/db/database_manager.h"
-#include "components/safe_browsing/features.h"
-#include "components/safe_browsing/password_protection/password_protection_navigation_throttle.h"
 #include "components/security_interstitials/content/origin_policy_ui.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/content/ssl_error_navigation_throttle.h"
@@ -4890,14 +4879,6 @@ void ChromeContentBrowserClient::SetDefa
   g_default_quota_settings = settings;
 }
 
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-ChromeContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate(
-    content::ResourceContext* resource_context) {
-  DCHECK_CURRENTLY_ON(BrowserThread::IO);
-
-  return nullptr;
-}
-
 base::Optional<std::string>
 ChromeContentBrowserClient::GetOriginPolicyErrorPage(
     network::OriginPolicyState error_reason,
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -63,11 +63,6 @@ class PreviewsDecider;
 class PreviewsUserData;
 }  // namespace previews
 
-namespace safe_browsing {
-class SafeBrowsingService;
-class UrlCheckerDelegate;
-}
-
 namespace ui {
 class NativeTheme;
 }
@@ -701,9 +696,6 @@ class ChromeContentBrowserClient : publi
   static void SetDefaultQuotaSettingsForTesting(
       const storage::QuotaSettings *settings);
 
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-  GetSafeBrowsingUrlCheckerDelegate(content::ResourceContext* resource_context);
-
 #if BUILDFLAG(ENABLE_PLUGINS)
   // Set of origins that can use TCP/UDP private APIs from NaCl.
   std::set<std::string> allowed_socket_origins_;
@@ -718,10 +710,6 @@ class ChromeContentBrowserClient : publi
   // Parts are deleted in the reverse order they are added.
   std::vector<ChromeContentBrowserClientParts*> extra_parts_;
 
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-      safe_browsing_url_checker_delegate_;
-
   std::unique_ptr<data_reduction_proxy::DataReductionProxyThrottleManager>
       data_reduction_proxy_throttle_manager_;
 
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -29,7 +29,6 @@
 #include "components/rappor/public/rappor_utils.h"
 #include "components/rappor/rappor_recorder_impl.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/browser/mojo_safe_browsing_impl.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "components/startup_metric_utils/browser/startup_metric_host_impl.h"
--- a/chrome/browser/component_updater/file_type_policies_component_installer.cc
+++ b/chrome/browser/component_updater/file_type_policies_component_installer.cc
@@ -18,7 +18,6 @@
 #include "base/stl_util.h"
 #include "base/task/post_task.h"
 #include "base/version.h"
-#include "chrome/common/safe_browsing/file_type_policies.h"
 #include "components/component_updater/component_updater_paths.h"
 
 using component_updater::ComponentUpdateService;
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -39,9 +39,6 @@
 #include "chrome/browser/download/save_package_file_picker.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/buildflags.h"
@@ -51,7 +48,6 @@
 #include "chrome/common/net/safe_search_util.h"
 #include "chrome/common/pdf_util.h"
 #include "chrome/common/pref_names.h"
-#include "chrome/common/safe_browsing/file_type_policies.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_features.h"
@@ -116,8 +112,6 @@ using content::DownloadManager;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadFileType;
-using safe_browsing::DownloadProtectionService;
 
 namespace {
 
@@ -745,20 +739,6 @@ ChromeDownloadManagerDelegate::Applicati
   return std::string(chrome::kApplicationClientIDStringForAVScanning);
 }
 
-DownloadProtectionService*
-    ChromeDownloadManagerDelegate::GetDownloadProtectionService() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && sb_service->download_protection_service() &&
-      profile_->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled)) {
-    return sb_service->download_protection_service();
-  }
-#endif
-  return nullptr;
-}
-
 void ChromeDownloadManagerDelegate::ShouldBlockDownload(
     download::DownloadItem* download,
     const base::FilePath& virtual_path,
@@ -1221,8 +1201,6 @@ void ChromeDownloadManagerDelegate::OnDo
     if (item->GetOriginalMimeType() == "application/x-x509-user-cert")
       DownloadItemModel(item).SetShouldPreferOpeningInBrowser(true);
 #endif
-
-    DownloadItemModel(item).SetDangerLevel(target_info->danger_level);
   }
   if (ShouldBlockFile(target_info->danger_type, item)) {
     target_info->result = download::DOWNLOAD_INTERRUPT_REASON_FILE_BLOCKED;
--- a/chrome/browser/download/chrome_download_manager_delegate.h
+++ b/chrome/browser/download/chrome_download_manager_delegate.h
@@ -22,8 +22,6 @@
 #include "chrome/browser/download/download_completion_blocker.h"
 #include "chrome/browser/download/download_target_determiner_delegate.h"
 #include "chrome/browser/download/download_target_info.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -130,26 +128,7 @@ class ChromeDownloadManagerDelegate
 
   DownloadPrefs* download_prefs() { return download_prefs_.get(); }
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  // The state of a safebrowsing check.
-  class SafeBrowsingState : public DownloadCompletionBlocker {
-   public:
-    SafeBrowsingState() = default;
-    ~SafeBrowsingState() override;
-
-    // String pointer used for identifying safebrowing data associated with
-    // a download item.
-    static const char kSafeBrowsingUserDataKey[];
-
-   private:
-    DISALLOW_COPY_AND_ASSIGN(SafeBrowsingState);
-  };
-#endif  // FULL_SAFE_BROWSING
-
  protected:
-  virtual safe_browsing::DownloadProtectionService*
-      GetDownloadProtectionService();
-
   // Show file picker for |download|.
   virtual void ShowFilePickerForDownload(
       download::DownloadItem* download,
@@ -218,8 +197,7 @@ class ChromeDownloadManagerDelegate
                const content::NotificationDetails& details) override;
 
   // Callback function after the DownloadProtectionService completes.
-  void CheckClientDownloadDone(uint32_t download_id,
-                               safe_browsing::DownloadCheckResult result);
+  void CheckClientDownloadDone(uint32_t download_id);
 
   // Internal gateways for ShouldCompleteDownload().
   bool IsDownloadReadyForCompletion(
--- a/chrome/browser/download/chrome_download_manager_delegate_unittest.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate_unittest.cc
@@ -28,7 +28,6 @@
 #include "chrome/browser/download/download_prefs.h"
 #include "chrome/browser/download/download_target_info.h"
 #include "chrome/browser/download/mixed_content_download_blocking.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_paths.h"
@@ -74,7 +73,6 @@
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadFileType;
 using ::testing::_;
 using ::testing::AnyNumber;
 using ::testing::AtMost;
@@ -208,9 +206,6 @@ class TestChromeDownloadManagerDelegate
                download::DownloadDangerType(DownloadItem*,
                                             const base::FilePath&));
 
-  MOCK_METHOD0(GetDownloadProtectionService,
-               safe_browsing::DownloadProtectionService*());
-
   // The concrete implementation on desktop just invokes a file picker. Android
   // has a non-trivial implementation. The former is tested via browser tests,
   // and the latter is exercised in this unit test.
@@ -624,8 +619,6 @@ TEST_F(ChromeDownloadManagerDelegateTest
     DetermineDownloadTargetResult result;
     DetermineDownloadTarget(download_item.get(), &result);
 
-    EXPECT_EQ(DownloadFileType::DANGEROUS,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               result.danger_type);
   }
@@ -637,8 +630,6 @@ TEST_F(ChromeDownloadManagerDelegateTest
         .WillRepeatedly(Return(kSafeContentDisposition));
     DetermineDownloadTargetResult result;
     DetermineDownloadTarget(download_item.get(), &result);
-    EXPECT_EQ(DownloadFileType::NOT_DANGEROUS,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               result.danger_type);
   }
@@ -650,8 +641,6 @@ TEST_F(ChromeDownloadManagerDelegateTest
         .WillRepeatedly(Return(kModerateContentDisposition));
     DetermineDownloadTargetResult result;
     DetermineDownloadTarget(download_item.get(), &result);
-    EXPECT_EQ(DownloadFileType::ALLOW_ON_USER_GESTURE,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               result.danger_type);
   }
@@ -1116,7 +1105,6 @@ namespace {
 
 struct SafeBrowsingTestParameters {
   download::DownloadDangerType initial_danger_type;
-  DownloadFileType::DangerLevel initial_danger_level;
   safe_browsing::DownloadCheckResult verdict;
   DownloadPrefs::DownloadRestriction download_restriction;
 
@@ -1168,7 +1156,6 @@ void ChromeDownloadManagerDelegateTestWi
 const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     // SAFE verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS, safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
@@ -1176,8 +1163,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
@@ -1185,8 +1170,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1194,8 +1177,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNCOMMON verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT,
@@ -1203,8 +1184,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // POTENTIALLY_UNWANTED verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1212,8 +1191,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // SAFE verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
@@ -1221,8 +1198,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1230,8 +1205,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a potentially dangerous file blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::DANGEROUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1239,8 +1212,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a potentially dangerous file not blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1248,8 +1219,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1257,8 +1226,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file block by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1266,8 +1233,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file block by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST,
@@ -1275,8 +1240,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file block by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL,
@@ -1284,8 +1247,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNCOMMON verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT,
@@ -1293,8 +1254,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1303,8 +1262,6 @@ const SafeBrowsingTestParameters kSafeBr
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file, blocked by
     // policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::POTENTIALLY_DANGEROUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1313,8 +1270,6 @@ const SafeBrowsingTestParameters kSafeBr
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file, not
     // blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::DANGEROUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1323,8 +1278,6 @@ const SafeBrowsingTestParameters kSafeBr
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file, not
     // blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1332,7 +1285,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // SAFE verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1340,7 +1292,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1348,7 +1299,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1356,7 +1306,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNCOMMON verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT,
@@ -1364,8 +1313,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // POTENTIALLY_UNWANTED verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1389,11 +1336,6 @@ TEST_P(ChromeDownloadManagerDelegateTest
   EXPECT_CALL(*download_item, GetDangerType())
       .WillRepeatedly(Return(kParameters.initial_danger_type));
 
-  if (kParameters.initial_danger_level != DownloadFileType::NOT_DANGEROUS) {
-    DownloadItemModel(download_item.get())
-        .SetDangerLevel(kParameters.initial_danger_level);
-  }
-
   if (kParameters.blocked) {
     EXPECT_CALL(*download_item,
                 OnContentCheckCompleted(
--- a/chrome/browser/download/download_browsertest.cc
+++ b/chrome/browser/download/download_browsertest.cc
@@ -67,7 +67,6 @@
 #include "chrome/browser/renderer_context_menu/render_view_context_menu_browsertest_util.h"
 #include "chrome/browser/renderer_context_menu/render_view_context_menu_test_util.h"
 #include "chrome/browser/reputation/safety_tip_test_utils.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_commands.h"
 #include "chrome/browser/ui/browser_finder.h"
@@ -80,7 +79,6 @@
 #include "chrome/common/chrome_paths.h"
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/pref_names.h"
-#include "chrome/common/safe_browsing/download_file_types.pb.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/generated_resources.h"
 #include "chrome/test/base/in_process_browser_test.h"
@@ -97,8 +95,6 @@
 #include "components/infobars/core/infobar.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/proto/csd.pb.h"
-#include "components/safe_browsing/safe_browsing_service_interface.h"
 #include "components/security_state/core/features.h"
 #include "components/security_state/core/security_state.h"
 #include "components/services/quarantine/test_support.h"
@@ -1252,6 +1248,7 @@ INSTANTIATE_TEST_SUITE_P(
 
 namespace {
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 class FakeDownloadProtectionService
     : public safe_browsing::DownloadProtectionService {
  public:
@@ -1324,6 +1321,7 @@ class DownloadTestWithFakeSafeBrowsing :
  protected:
   std::unique_ptr<TestSafeBrowsingServiceFactory> test_safe_browsing_factory_;
 };
+#endif // BUILDFLAG(FULL_SAFE_BROWSING)
 
 class DownloadWakeLockTest : public DownloadTest {
  public:
@@ -4363,8 +4361,6 @@ class DisableSafeBrowsingOnInProgressDow
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               download->GetDangerType());
     EXPECT_FALSE(download->IsDangerous());
-    EXPECT_NE(safe_browsing::DownloadFileType::NOT_DANGEROUS,
-              DownloadItemModel(download).GetDangerLevel());
     return true;
   }
 
@@ -4469,7 +4465,6 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, Saf
 IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceDiscardDownload) {
   PrefService* prefs = browser()->profile()->GetPrefs();
   prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-  safe_browsing::SetExtendedReportingPref(prefs, true);
 
   // Make a dangerous file.
   embedded_test_server()->ServeFilesFromDirectory(GetTestDataDirectory());
@@ -4490,40 +4485,11 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, Fee
   DownloadManagerForBrowser(browser())->GetAllDownloads(&downloads);
   ASSERT_EQ(1u, downloads.size());
   EXPECT_TRUE(downloads[0]->IsDangerous());
-
-  // Save fake pings for the download.
-  safe_browsing::ClientDownloadReport fake_metadata;
-  fake_metadata.mutable_download_request()->set_url("http://test");
-  fake_metadata.mutable_download_request()->set_length(1);
-  fake_metadata.mutable_download_request()->mutable_digests()->set_sha1("hi");
-  fake_metadata.mutable_download_response()->set_verdict(
-      safe_browsing::ClientDownloadResponse::UNCOMMON);
-  std::string ping_request(
-      fake_metadata.download_request().SerializeAsString());
-  std::string ping_response(
-      fake_metadata.download_response().SerializeAsString());
-  safe_browsing::DownloadFeedbackService::MaybeStorePingsForDownload(
-      safe_browsing::DownloadCheckResult::UNCOMMON, true /* upload_requested */,
-      downloads[0], ping_request, ping_response);
-  ASSERT_TRUE(safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *(downloads[0])));
-
-  // Begin feedback and check that the file is "stolen".
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  safe_browsing::DownloadProtectionService* download_protection_service =
-      sb_service->download_protection_service();
-  download_protection_service->MaybeBeginFeedbackForDownload(
-      browser()->profile(), downloads[0], DownloadCommands::DISCARD);
-  std::vector<DownloadItem*> updated_downloads;
-  GetDownloads(browser(), &updated_downloads);
-  ASSERT_TRUE(updated_downloads.empty());
 }
 
 IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceKeepDownload) {
   PrefService* prefs = browser()->profile()->GetPrefs();
   prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-  safe_browsing::SetExtendedReportingPref(prefs, true);
 
   // Make a dangerous file.
   embedded_test_server()->ServeFilesFromDirectory(GetTestDataDirectory());
@@ -4550,30 +4516,7 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, Fee
   ASSERT_EQ(1u, downloads.size());
   EXPECT_TRUE(downloads[0]->IsDangerous());
 
-  // Save fake pings for the download.
-  safe_browsing::ClientDownloadReport fake_metadata;
-  fake_metadata.mutable_download_request()->set_url("http://test");
-  fake_metadata.mutable_download_request()->set_length(1);
-  fake_metadata.mutable_download_request()->mutable_digests()->set_sha1("hi");
-  fake_metadata.mutable_download_response()->set_verdict(
-      safe_browsing::ClientDownloadResponse::UNCOMMON);
-  std::string ping_request(
-      fake_metadata.download_request().SerializeAsString());
-  std::string ping_response(
-      fake_metadata.download_response().SerializeAsString());
-  safe_browsing::DownloadFeedbackService::MaybeStorePingsForDownload(
-      safe_browsing::DownloadCheckResult::UNCOMMON, true /* upload_requested */,
-      downloads[0], ping_request, ping_response);
-  ASSERT_TRUE(safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *(downloads[0])));
-
   // Begin feedback and check that file is still there.
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  safe_browsing::DownloadProtectionService* download_protection_service =
-      sb_service->download_protection_service();
-  download_protection_service->MaybeBeginFeedbackForDownload(
-      browser()->profile(), downloads[0], DownloadCommands::KEEP);
   completion_observer->WaitForFinished();
 
   std::vector<DownloadItem*> updated_downloads;
@@ -4608,18 +4551,6 @@ IN_PROC_BROWSER_TEST_F(DownloadTestWithF
   DownloadItemModel model(download);
   DownloadCommands(&model).ExecuteCommand(DownloadCommands::KEEP);
 
-  safe_browsing::ClientSafeBrowsingReportRequest actual_report;
-  actual_report.ParseFromString(
-      test_safe_browsing_factory_->fake_safe_browsing_service()
-          ->serilized_download_report());
-  EXPECT_EQ(safe_browsing::ClientSafeBrowsingReportRequest::
-                DANGEROUS_DOWNLOAD_WARNING,
-            actual_report.type());
-  EXPECT_EQ(safe_browsing::ClientDownloadResponse::UNCOMMON,
-            actual_report.download_verdict());
-  EXPECT_EQ(download_url.spec(), actual_report.url());
-  EXPECT_TRUE(actual_report.did_proceed());
-
   download->Cancel(true);
 }
 
@@ -4645,10 +4576,6 @@ IN_PROC_BROWSER_TEST_F(
   DownloadItem* download = downloads[0];
   DownloadItemModel model(download);
   DownloadCommands(&model).ExecuteCommand(DownloadCommands::DISCARD);
-
-  EXPECT_TRUE(test_safe_browsing_factory_->fake_safe_browsing_service()
-                  ->serilized_download_report()
-                  .empty());
 }
 #endif  // FULL_SAFE_BROWSING
 
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -69,10 +69,6 @@ class DownloadItemModelData : public bas
   // for the file type.
   bool should_prefer_opening_in_browser_;
 
-  // Danger level of the file determined based on the file type and whether
-  // there was a user action associated with the download.
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
-
   // Whether the download is currently being revived.
   bool is_being_revived_;
 
@@ -108,7 +104,6 @@ DownloadItemModelData::DownloadItemModel
     : should_show_in_shelf_(true),
       was_ui_notified_(false),
       should_prefer_opening_in_browser_(false),
-      danger_level_(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_being_revived_(false) {}
 
 } // namespace
@@ -377,17 +372,6 @@ void DownloadItemModel::SetShouldPreferO
   data->should_prefer_opening_in_browser_ = preference;
 }
 
-safe_browsing::DownloadFileType::DangerLevel DownloadItemModel::GetDangerLevel() const {
-  const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
-  return data ? data->danger_level_ : safe_browsing::DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadItemModel::SetDangerLevel(
-    safe_browsing::DownloadFileType::DangerLevel danger_level) {
-  DownloadItemModelData* data = DownloadItemModelData::GetOrCreate(download_);
-  data->danger_level_ = danger_level;
-}
-
 bool DownloadItemModel::IsBeingRevived() const {
   const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
   return data && data->is_being_revived_;
--- a/chrome/browser/download/download_item_model.h
+++ b/chrome/browser/download/download_item_model.h
@@ -11,7 +11,6 @@
 #include "base/macros.h"
 #include "base/strings/string16.h"
 #include "chrome/browser/download/download_ui_model.h"
-#include "chrome/common/safe_browsing/download_file_types.pb.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
 
@@ -49,9 +48,6 @@ class DownloadItemModel : public Downloa
   void SetWasUINotified(bool should_notify) override;
   bool ShouldPreferOpeningInBrowser() const override;
   void SetShouldPreferOpeningInBrowser(bool preference) override;
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const override;
-  void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level) override;
   void OpenUsingPlatformHandler() override;
   bool IsBeingRevived() const override;
   void SetIsBeingRevived(bool is_being_revived) override;
--- a/chrome/browser/download/download_item_model_unittest.cc
+++ b/chrome/browser/download/download_item_model_unittest.cc
@@ -26,7 +26,6 @@
 #include "ui/gfx/text_utils.h"
 
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 using ::testing::Mock;
 using ::testing::NiceMock;
 using ::testing::Return;
@@ -394,12 +393,6 @@ TEST_F(DownloadItemModelTest, ShouldShow
 
 TEST_F(DownloadItemModelTest, DangerLevel) {
   SetupDownloadItemDefaults();
-
-  // Default danger level is NOT_DANGEROUS.
-  EXPECT_EQ(DownloadFileType::NOT_DANGEROUS, model().GetDangerLevel());
-
-  model().SetDangerLevel(DownloadFileType::ALLOW_ON_USER_GESTURE);
-  EXPECT_EQ(DownloadFileType::ALLOW_ON_USER_GESTURE, model().GetDangerLevel());
 }
 
 TEST_F(DownloadItemModelTest, HasSupportedImageMimeType) {
--- a/chrome/browser/download/download_prefs.cc
+++ b/chrome/browser/download/download_prefs.cc
@@ -34,7 +34,6 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_paths.h"
 #include "chrome/common/pref_names.h"
-#include "chrome/common/safe_browsing/file_type_policies.h"
 #include "components/download/public/common/download_item.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
@@ -56,7 +55,6 @@
 using content::BrowserContext;
 using content::BrowserThread;
 using content::DownloadManager;
-using safe_browsing::FileTypePolicies;
 
 namespace {
 
@@ -199,8 +197,6 @@ DownloadPrefs::DownloadPrefs(Profile* pr
   download_path_.Init(prefs::kDownloadDefaultDirectory, prefs);
   save_file_path_.Init(prefs::kSaveFileDefaultDirectory, prefs);
   save_file_type_.Init(prefs::kSaveFileType, prefs);
-  safebrowsing_for_trusted_sources_enabled_.Init(
-      prefs::kSafeBrowsingForTrustedSourcesEnabled, prefs);
   download_restriction_.Init(prefs::kDownloadRestrictions, prefs);
 
   // We store any file extension that should be opened automatically at
@@ -246,8 +242,6 @@ void DownloadPrefs::RegisterProfilePrefs
   registry->RegisterIntegerPref(prefs::kSaveFileType,
                                 content::SAVE_PAGE_TYPE_AS_COMPLETE_HTML);
   registry->RegisterIntegerPref(prefs::kDownloadRestrictions, 0);
-  registry->RegisterBooleanPref(prefs::kSafeBrowsingForTrustedSourcesEnabled,
-                                true);
 
   const base::FilePath& default_download_path = GetDefaultDownloadDirectory();
   registry->RegisterFilePathPref(prefs::kDownloadDefaultDirectory,
--- a/chrome/browser/download/download_prefs.h
+++ b/chrome/browser/download/download_prefs.h
@@ -71,9 +71,6 @@ class DownloadPrefs {
   DownloadRestriction download_restriction() const {
     return static_cast<DownloadRestriction>(*download_restriction_);
   }
-  bool safebrowsing_for_trusted_sources_enabled() const {
-    return *safebrowsing_for_trusted_sources_enabled_;
-  }
 
   // Returns true if the prompt_for_download preference has been set and the
   // download location is not managed (which means the user shouldn't be able
@@ -136,7 +133,6 @@ class DownloadPrefs {
   FilePathPrefMember save_file_path_;
   IntegerPrefMember save_file_type_;
   IntegerPrefMember download_restriction_;
-  BooleanPrefMember safebrowsing_for_trusted_sources_enabled_;
 
   // To identify if a download URL is from a trusted source.
   std::unique_ptr<TrustedSourcesManager> trusted_sources_manager_;
--- a/chrome/browser/download/download_prefs_unittest.cc
+++ b/chrome/browser/download/download_prefs_unittest.cc
@@ -6,7 +6,6 @@
 
 #include "base/files/file_path.h"
 #include "chrome/common/pref_names.h"
-#include "chrome/common/safe_browsing/file_type_policies.h"
 #include "chrome/test/base/testing_profile.h"
 #include "components/prefs/pref_service.h"
 #include "content/public/test/browser_task_environment.h"
@@ -20,18 +19,6 @@
 #include "content/public/test/test_service_manager_context.h"
 #endif
 
-using safe_browsing::FileTypePolicies;
-
-TEST(DownloadPrefsTest, Prerequisites) {
-  // Most of the tests below are based on the assumption that .swf files are not
-  // allowed to open automatically, and that .txt files are allowed. If this
-  // assumption changes, then we need to update the tests to match.
-  ASSERT_FALSE(FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-      base::FilePath(FILE_PATH_LITERAL("a.swf"))));
-  ASSERT_TRUE(FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-      base::FilePath(FILE_PATH_LITERAL("a.txt"))));
-}
-
 TEST(DownloadPrefsTest, NoAutoOpenForDisallowedFileTypes) {
   const base::FilePath kDangerousFilePath(FILE_PATH_LITERAL("/b/very-bad.swf"));
 
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -23,7 +23,6 @@
 #include "chrome/browser/history/history_service_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/common/pref_names.h"
-#include "chrome/common/safe_browsing/file_type_policies.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/history/core/browser/history_service.h"
@@ -60,7 +59,6 @@
 using content::BrowserThread;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -101,7 +99,6 @@ DownloadTargetDeterminer::DownloadTarget
       create_target_directory_(false),
       conflict_action_(conflict_action),
       danger_type_(download->GetDangerType()),
-      danger_level_(DownloadFileType::NOT_DANGEROUS),
       virtual_path_(initial_virtual_path),
       is_filetype_handled_safely_(false),
 #if defined(OS_ANDROID)
@@ -787,42 +784,7 @@ DownloadTargetDeterminer::Result
     return CONTINUE;
   }
 
-  // First determine the danger level assuming that the user doesn't have any
-  // prior visits to the referrer recoreded in history. The resulting danger
-  // level would be ALLOW_ON_USER_GESTURE if the level depends on the visit
-  // history. In the latter case, we can query the history DB to determine if
-  // there were prior requests and determine the danger level again once the
-  // result is available.
-  danger_level_ = GetDangerLevel(NO_VISITS_TO_REFERRER);
-
-  if (danger_level_ == DownloadFileType::NOT_DANGEROUS)
-    return CONTINUE;
-
-  if (danger_level_ == DownloadFileType::ALLOW_ON_USER_GESTURE) {
-    // HistoryServiceFactory redirects incognito profiles to on-record profiles.
-    // There's no history for on-record profiles in unit_tests.
-    history::HistoryService* history_service =
-        HistoryServiceFactory::GetForProfile(
-            GetProfile(), ServiceAccessType::EXPLICIT_ACCESS);
-
-    if (history_service && download_->GetReferrerUrl().is_valid()) {
-      history_service->GetVisibleVisitCountToHost(
-          download_->GetReferrerUrl(),
-          base::BindOnce(
-              &VisitCountsToVisitedBefore,
-              base::BindOnce(
-                  &DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone,
-                  weak_ptr_factory_.GetWeakPtr())),
-          &history_tracker_);
-      return QUIT_DOLOOP;
-    }
-  }
-
-  // If the danger level doesn't depend on having visited the refererrer URL or
-  // if original profile doesn't have a HistoryService or the referrer url is
-  // invalid, then assume the referrer has not been visited before.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
+  danger_type_ = download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS;
   return CONTINUE;
 }
 
@@ -830,11 +792,7 @@ void DownloadTargetDeterminer::CheckVisi
     bool visited_referrer_before) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK_EQ(STATE_DETERMINE_INTERMEDIATE_PATH, next_state_);
-  danger_level_ = GetDangerLevel(
-      visited_referrer_before ? VISITED_REFERRER : NO_VISITS_TO_REFERRER);
-  if (danger_level_ != DownloadFileType::NOT_DANGEROUS &&
-      danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
+  danger_type_ = download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS;
   DoLoop();
 }
 
@@ -939,7 +897,6 @@ void DownloadTargetDeterminer::ScheduleC
             << " Intermediate:" << intermediate_path_.AsUTF8Unsafe()
             << " Confirmation reason:" << static_cast<int>(confirmation_reason_)
             << " Danger type:" << danger_type_
-            << " Danger level:" << danger_level_
             << " Result:" << static_cast<int>(result);
   std::unique_ptr<DownloadTargetInfo> target_info(new DownloadTargetInfo);
 
@@ -951,7 +908,6 @@ void DownloadTargetDeterminer::ScheduleC
            ? DownloadItem::TARGET_DISPOSITION_PROMPT
            : DownloadItem::TARGET_DISPOSITION_OVERWRITE);
   target_info->danger_type = danger_type_;
-  target_info->danger_level = danger_level_;
   target_info->intermediate_path = intermediate_path_;
   target_info->mime_type = mime_type_;
   target_info->is_filetype_handled_safely = is_filetype_handled_safely_;
@@ -1039,33 +995,6 @@ bool DownloadTargetDeterminer::HasPrompt
                                 DownloadItem::TARGET_DISPOSITION_PROMPT);
 }
 
-DownloadFileType::DangerLevel DownloadTargetDeterminer::GetDangerLevel(
-    PriorVisitsToReferrer visits) const {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  // If the user has has been prompted or will be, assume that the user has
-  // approved the download. A programmatic download is considered safe unless it
-  // contains malware.
-  if (HasPromptedForPath() ||
-      confirmation_reason_ != DownloadConfirmationReason::NONE ||
-      !download_->GetForcedFilePath().empty())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  // User-initiated extension downloads from pref-whitelisted sources are not
-  // considered dangerous.
-  if (download_->HasUserGesture() &&
-      download_crx_util::IsTrustedExtensionDownload(GetProfile(), *download_)) {
-    return DownloadFileType::NOT_DANGEROUS;
-  }
-
-  // Anything the user has marked auto-open is OK if it's user-initiated.
-  if (download_prefs_->IsAutoOpenEnabledBasedOnExtension(virtual_path_) &&
-      download_->HasUserGesture())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
 void DownloadTargetDeterminer::OnDownloadDestroyed(
     DownloadItem* download) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
--- a/chrome/browser/download/download_target_determiner.h
+++ b/chrome/browser/download/download_target_determiner.h
@@ -16,7 +16,6 @@
 #include "build/build_config.h"
 #include "chrome/browser/download/download_target_determiner_delegate.h"
 #include "chrome/browser/download/download_target_info.h"
-#include "chrome/common/safe_browsing/download_file_types.pb.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -313,16 +312,6 @@ class DownloadTargetDeterminer : public
   // operation.
   bool HasPromptedForPath() const;
 
-  // Returns true if this download should show the "dangerous file" warning.
-  // Various factors are considered, such as the type of the file, whether a
-  // user action initiated the download, and whether the user has explicitly
-  // marked the file type as "auto open". Protected virtual for testing.
-  //
-  // If |require_explicit_consent| is non-null then the pointed bool will be set
-  // to true if the download requires explicit user consent.
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel(
-      PriorVisitsToReferrer visits) const;
-
   // download::DownloadItem::Observer
   void OnDownloadDestroyed(download::DownloadItem* download) override;
 
@@ -334,7 +323,6 @@ class DownloadTargetDeterminer : public
   download::DownloadPathReservationTracker::FilenameConflictAction
       conflict_action_;
   download::DownloadDangerType danger_type_;
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
   base::FilePath virtual_path_;
   base::FilePath local_path_;
   base::FilePath intermediate_path_;
--- a/chrome/browser/download/download_target_info.cc
+++ b/chrome/browser/download/download_target_info.cc
@@ -4,12 +4,9 @@
 
 #include "chrome/browser/download/download_target_info.h"
 
-#include "chrome/common/safe_browsing/file_type_policies.h"
-
 DownloadTargetInfo::DownloadTargetInfo()
     : target_disposition(download::DownloadItem::TARGET_DISPOSITION_OVERWRITE),
       danger_type(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS),
-      danger_level(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_filetype_handled_safely(false),
       result(download::DOWNLOAD_INTERRUPT_REASON_NONE) {}
 
--- a/chrome/browser/download/download_target_info.h
+++ b/chrome/browser/download/download_target_info.h
@@ -8,7 +8,6 @@
 #include <string>
 
 #include "base/files/file_path.h"
-#include "chrome/common/safe_browsing/download_file_types.pb.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
@@ -32,32 +31,6 @@ struct DownloadTargetInfo {
   // Danger type of the download.
   download::DownloadDangerType danger_type;
 
-  // The danger type of the download could be set to MAYBE_DANGEROUS_CONTENT if
-  // the file type is handled by SafeBrowsing. However, if the SafeBrowsing
-  // service is unable to verify whether the file is safe or not, we are on our
-  // own. The value of |danger_level| indicates whether the download should be
-  // considered dangerous if SafeBrowsing returns an unknown verdict.
-  //
-  // Note that some downloads (e.g. "Save link as" on a link to a binary) would
-  // not be considered 'Dangerous' even if SafeBrowsing came back with an
-  // unknown verdict. So we can't always show a warning when SafeBrowsing fails.
-  //
-  // The value of |danger_level| should be interpreted as follows:
-  //
-  //   NOT_DANGEROUS : Unless flagged by SafeBrowsing, the file should be
-  //       considered safe.
-  //
-  //   ALLOW_ON_USER_GESTURE : If SafeBrowsing claims the file is safe, then the
-  //       file is safe. An UNKOWN verdict results in the file being marked as
-  //       DANGEROUS_FILE.
-  //
-  //   DANGEROUS : This type of file shouldn't be allowed to download witout any
-  //       user action. Hence, if SafeBrowsing marks the file as SAFE, or
-  //       UNKONWN, the file will still be conisdered a DANGEROUS_FILE. However,
-  //       SafeBrowsing may flag the file as being malicious, in which case the
-  //       malicious classification should take precedence.
-  safe_browsing::DownloadFileType::DangerLevel danger_level;
-
   // Suggested intermediate path. The downloaded bytes should be written to this
   // path until all the bytes are available and the user has accepted a
   // dangerous download. At that point, the download can be renamed to
--- a/chrome/browser/download/download_ui_model.cc
+++ b/chrome/browser/download/download_ui_model.cc
@@ -8,8 +8,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/time/time.h"
 #include "chrome/browser/download/offline_item_utils.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
@@ -32,7 +30,6 @@
 
 using base::TimeDelta;
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 using offline_items_collection::FailState;
 
 namespace {
@@ -258,7 +255,7 @@ base::string16 DownloadUIModel::GetWarni
 
   switch (GetDangerType()) {
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL: {
-      return l10n_util::GetStringUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_URL);
+      break;
     }
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE: {
       if (IsExtensionDownload()) {
@@ -271,22 +268,16 @@ base::string16 DownloadUIModel::GetWarni
     }
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST: {
-      return l10n_util::GetStringFUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT,
-                                        elided_filename);
+      break;
     }
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool request_ap_verdicts = false;
 #if BUILDFLAG(FULL_SAFE_BROWSING)
       request_ap_verdicts =
           safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
               profile())
               ->RequestsAdvancedProtectionVerdicts();
 #endif
-      return l10n_util::GetStringFUTF16(
-          request_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
-          elided_filename);
+      break;
     }
     case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED: {
       return l10n_util::GetStringFUTF16(IDS_PROMPT_DOWNLOAD_CHANGES_SETTINGS,
@@ -406,13 +397,6 @@ bool DownloadUIModel::ShouldPreferOpenin
 
 void DownloadUIModel::SetShouldPreferOpeningInBrowser(bool preference) {}
 
-DownloadFileType::DangerLevel DownloadUIModel::GetDangerLevel() const {
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadUIModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {}
-
 void DownloadUIModel::OpenUsingPlatformHandler() {}
 
 bool DownloadUIModel::IsBeingRevived() const {
--- a/chrome/browser/download/download_ui_model.h
+++ b/chrome/browser/download/download_ui_model.h
@@ -14,7 +14,6 @@
 #include "base/strings/string16.h"
 #include "build/build_config.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/common/safe_browsing/download_file_types.pb.h"
 #include "components/download/public/common/download_item.h"
 #include "components/offline_items_collection/core/offline_item.h"
 #include "components/safe_browsing/buildflags.h"
@@ -173,15 +172,6 @@ class DownloadUIModel {
   // Change what's returned by ShouldPreferOpeningInBrowser to |preference|.
   virtual void SetShouldPreferOpeningInBrowser(bool preference);
 
-  // Return the danger level determined during download target determination.
-  // The value returned here is independent of the danger level as determined by
-  // the Safe Browsing.
-  virtual safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const;
-
-  // Change what's returned by GetDangerLevel().
-  virtual void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level);
-
   // Open the download using the platform handler for the download. The behavior
   // of this method will be different from DownloadItem::OpenDownload() if
   // ShouldPreferOpeningInBrowser().
--- a/chrome/browser/download/notification/download_item_notification.cc
+++ b/chrome/browser/download/notification/download_item_notification.cc
@@ -24,8 +24,6 @@
 #include "chrome/browser/notifications/notification_display_service.h"
 #include "chrome/browser/notifications/notification_display_service_factory.h"
 #include "chrome/browser/notifications/notification_handler.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
@@ -714,14 +712,8 @@ base::string16 DownloadItemNotification:
                                         elided_filename);
     }
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool requests_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->RequestsAdvancedProtectionVerdicts();
       return l10n_util::GetStringFUTF16(
-          requests_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
+          IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
           elided_filename);
     }
     case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED: {
--- a/chrome/browser/download/notification/download_notification_browsertest.cc
+++ b/chrome/browser/download/notification/download_notification_browsertest.cc
@@ -90,13 +90,6 @@ class TestChromeDownloadManagerDelegate
   // Return if  the download is opened.
   bool opened() const { return opened_; }
 
- protected:
-  // Disable DownloadProtectionService in order to disable content checking.
-  safe_browsing::DownloadProtectionService* GetDownloadProtectionService()
-      override {
-    return nullptr;
-  }
-
  private:
   bool opened_;
 };
--- a/chrome/browser/download/save_package_file_picker.cc
+++ b/chrome/browser/download/save_package_file_picker.cc
@@ -43,7 +43,6 @@ namespace {
 bool g_should_prompt_for_filename = true;
 
 void OnSavePackageDownloadCreated(download::DownloadItem* download) {
-  ChromeDownloadManagerDelegate::DisableSafeBrowsing(download);
 }
 
 // Adds "Webpage, HTML Only" type to FileTypeInfo.
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -302,14 +302,6 @@ jumbo_static_library("extensions") {
     "api/resources_private/resources_private_api.h",
     "api/runtime/chrome_runtime_api_delegate.cc",
     "api/runtime/chrome_runtime_api_delegate.h",
-    "api/safe_browsing_private/safe_browsing_private_api.cc",
-    "api/safe_browsing_private/safe_browsing_private_api.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.h",
-    "api/safe_browsing_private/safe_browsing_util.cc",
-    "api/safe_browsing_private/safe_browsing_util.h",
     "api/sessions/session_id.cc",
     "api/sessions/session_id.h",
     "api/sessions/sessions_api.cc",
@@ -752,9 +744,6 @@ jumbo_static_library("extensions") {
 
     # TODO(loyso): Remove this circular dependency. http://crbug.com/876576.
     "//chrome/browser/web_applications/extensions",
-
-    # TODO(crbug/925153): Remove this circular dependency.
-    "//chrome/browser/safe_browsing",
   ]
 
   # Since browser and browser_extensions actually depend on each other,
@@ -766,9 +755,6 @@ jumbo_static_library("extensions") {
     "//chrome/browser/extensions/api:api_registration",
     "//chrome/common",
     "//chrome/common/extensions/api",
-    "//components/safe_browsing:csd_proto",
-    "//components/safe_browsing:webprotect_proto",
-    "//components/safe_browsing/db:util",
     "//components/signin/core/browser",
     "//content/public/browser",
     "//mojo/public/cpp/bindings",
@@ -791,11 +777,9 @@ jumbo_static_library("extensions") {
     "//chrome/browser/media/router",
     "//chrome/browser/media/router/discovery",
     "//chrome/browser/resource_coordinator:mojo_bindings",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/web_applications/components",
     "//chrome/browser/web_applications/extensions",
     "//chrome/common/extensions/api:extensions_features",
-    "//chrome/common/safe_browsing:proto",
     "//chrome/services/removable_storage_writer/public/mojom",
     "//components/app_modal",
     "//components/autofill/content/browser",
@@ -838,10 +822,6 @@ jumbo_static_library("extensions") {
     "//components/rappor",
     "//components/resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing:csd_proto",
-    "//components/safe_browsing:features",
-    "//components/safe_browsing/common:safe_browsing_prefs",
-    "//components/safe_browsing/db:database_manager",
     "//components/search_engines",
     "//components/services/patch/content",
     "//components/services/unzip/content",
--- a/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper.cc
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper.cc
@@ -210,22 +210,6 @@ GenerateChromeUserProfileReportRequest(c
     }
   }
 
-  if (prefs->GetBoolean(enterprise_reporting::kReportSafeBrowsingData)) {
-    if (const base::Value* count =
-            profile_report.FindKey(kSafeBrowsingWarnings)) {
-      if (!count->is_int())
-        return nullptr;
-      request->set_safe_browsing_warnings(count->GetInt());
-    }
-
-    if (const base::Value* count =
-            profile_report.FindKey(kSafeBrowsingWarningsClickThrough)) {
-      if (!count->is_int())
-        return nullptr;
-      request->set_safe_browsing_warnings_click_through(count->GetInt());
-    }
-  }
-
   return request;
 }
 
--- a/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper_unittest.cc
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper_unittest.cc
@@ -240,12 +240,6 @@ TEST_F(ChromeDesktopReportRequestGenerat
   std::unique_ptr<em::ChromeDesktopReportRequest> request =
       GenerateChromeDesktopReportRequest(*report, &profile_);
   ASSERT_TRUE(request);
-  EXPECT_EQ(3u, request->browser_report()
-                    .chrome_user_profile_reports(0)
-                    .safe_browsing_warnings());
-  EXPECT_EQ(1u, request->browser_report()
-                    .chrome_user_profile_reports(0)
-                    .safe_browsing_warnings_click_through());
 }
 
 TEST_F(ChromeDesktopReportRequestGeneratorTest, DontReportPolicyData) {
--- a/chrome/browser/extensions/api/enterprise_reporting_private/prefs.cc
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/prefs.cc
@@ -22,16 +22,12 @@ const char kReportUserIDData[] = "enterp
 const char kReportExtensionsAndPluginsData[] =
     "enterprise_reporting.report_extensions_and_plugins_data";
 
-const char kReportSafeBrowsingData[] =
-    "enterprise_reporting.report_safe_browsing_data";
-
 void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(kReportVersionData, true);
   registry->RegisterBooleanPref(kReportPolicyData, true);
   registry->RegisterBooleanPref(kReportMachineIDData, true);
   registry->RegisterBooleanPref(kReportUserIDData, true);
   registry->RegisterBooleanPref(kReportExtensionsAndPluginsData, true);
-  registry->RegisterBooleanPref(kReportSafeBrowsingData, false);
   registry->RegisterBooleanPref(prefs::kCloudReportingEnabled, false);
 }
 
--- a/chrome/browser/extensions/api/enterprise_reporting_private/prefs.h
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/prefs.h
@@ -27,9 +27,6 @@ extern const char kReportUserIDData[];
 // Controls reporting of Chrome extensions and plugins data.
 extern const char kReportExtensionsAndPluginsData[];
 
-// Controls reporting of Safe browsing data.
-extern const char kReportSafeBrowsingData[];
-
 void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry);
 
 }  // namespace enterprise_reporting
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
@@ -29,8 +29,6 @@
 #include "chrome/browser/extensions/install_tracker.h"
 #include "chrome/browser/extensions/scoped_active_install.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/ui/app_list/app_list_util.h"
 #include "chrome/common/extensions/extension_constants.h"
@@ -56,8 +54,6 @@
 #include "chrome/browser/supervised_user/supervised_user_service_factory.h"
 #endif
 
-using safe_browsing::SafeBrowsingNavigationObserverManager;
-
 namespace extensions {
 
 namespace BeginInstallWithManifest3 =
--- a/chrome/browser/extensions/blacklist.cc
+++ b/chrome/browser/extensions/blacklist.cc
@@ -19,143 +19,16 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/extensions/blacklist_factory.h"
 #include "chrome/browser/extensions/blacklist_state_fetcher.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/db/util.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "extensions/browser/extension_prefs.h"
 
 using content::BrowserThread;
-using safe_browsing::SafeBrowsingDatabaseManager;
 
 namespace extensions {
 
-namespace {
-
-// The safe browsing database manager to use. Make this a global/static variable
-// rather than a member of Blacklist because Blacklist accesses the real
-// database manager before it has a chance to get a fake one.
-class LazySafeBrowsingDatabaseManager {
- public:
-  LazySafeBrowsingDatabaseManager() {
-#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      instance_ =
-          g_browser_process->safe_browsing_service()->database_manager();
-    }
-#endif
-  }
-
-  scoped_refptr<SafeBrowsingDatabaseManager> get() {
-    return instance_;
-  }
-
-  void set(scoped_refptr<SafeBrowsingDatabaseManager> instance) {
-    instance_ = instance;
-    database_changed_callback_list_.Notify();
-  }
-
-  std::unique_ptr<base::CallbackList<void()>::Subscription>
-  RegisterDatabaseChangedCallback(const base::RepeatingClosure& cb) {
-    return database_changed_callback_list_.Add(cb);
-  }
-
- private:
-  scoped_refptr<SafeBrowsingDatabaseManager> instance_;
-  base::CallbackList<void()> database_changed_callback_list_;
-};
-
-static base::LazyInstance<LazySafeBrowsingDatabaseManager>::DestructorAtExit
-    g_database_manager = LAZY_INSTANCE_INITIALIZER;
-
-// Implementation of SafeBrowsingDatabaseManager::Client, the class which is
-// called back from safebrowsing queries.
-//
-// Constructed on any thread but lives on the IO from then on.
-class SafeBrowsingClientImpl
-    : public SafeBrowsingDatabaseManager::Client,
-      public base::RefCountedThreadSafe<SafeBrowsingClientImpl> {
- public:
-  using OnResultCallback = base::Callback<void(const std::set<std::string>&)>;
-
-  // Constructs a client to query the database manager for |extension_ids| and
-  // run |callback| with the IDs of those which have been blacklisted.
-  static void Start(
-      const std::set<std::string>& extension_ids,
-      const OnResultCallback& callback) {
-    auto safe_browsing_client = base::WrapRefCounted(
-        new SafeBrowsingClientImpl(extension_ids, callback));
-    base::PostTask(
-        FROM_HERE, {BrowserThread::IO},
-        base::BindOnce(&SafeBrowsingClientImpl::StartCheck,
-                       safe_browsing_client, g_database_manager.Get().get(),
-                       extension_ids));
-  }
-
- private:
-  friend class base::RefCountedThreadSafe<SafeBrowsingClientImpl>;
-
-  SafeBrowsingClientImpl(const std::set<std::string>& extension_ids,
-                         const OnResultCallback& callback)
-      : callback_task_runner_(base::ThreadTaskRunnerHandle::Get()),
-        callback_(callback) {}
-
-  ~SafeBrowsingClientImpl() override {}
-
-  // Pass |database_manager| as a parameter to avoid touching
-  // SafeBrowsingService on the IO thread.
-  void StartCheck(scoped_refptr<SafeBrowsingDatabaseManager> database_manager,
-                  const std::set<std::string>& extension_ids) {
-    DCHECK_CURRENTLY_ON(BrowserThread::IO);
-    if (database_manager->CheckExtensionIDs(extension_ids, this)) {
-      // Definitely not blacklisted. Callback immediately.
-      callback_task_runner_->PostTask(
-          FROM_HERE, base::BindOnce(callback_, std::set<std::string>()));
-      return;
-    }
-    // Something might be blacklisted, response will come in
-    // OnCheckExtensionsResult.
-    AddRef();  // Balanced in OnCheckExtensionsResult
-  }
-
-  void OnCheckExtensionsResult(const std::set<std::string>& hits) override {
-    DCHECK_CURRENTLY_ON(BrowserThread::IO);
-    callback_task_runner_->PostTask(FROM_HERE, base::BindOnce(callback_, hits));
-    Release();  // Balanced in StartCheck.
-  }
-
-  scoped_refptr<base::SingleThreadTaskRunner> callback_task_runner_;
-  OnResultCallback callback_;
-
-  DISALLOW_COPY_AND_ASSIGN(SafeBrowsingClientImpl);
-};
-
-void CheckOneExtensionState(
-    const Blacklist::IsBlacklistedCallback& callback,
-    const Blacklist::BlacklistStateMap& state_map) {
-  callback.Run(state_map.empty() ? NOT_BLACKLISTED : state_map.begin()->second);
-}
-
-void GetMalwareFromBlacklistStateMap(
-    const Blacklist::GetMalwareIDsCallback& callback,
-    const Blacklist::BlacklistStateMap& state_map) {
-  std::set<std::string> malware;
-  for (const auto& state_pair : state_map) {
-    // TODO(oleg): UNKNOWN is treated as MALWARE for backwards compatibility.
-    // In future GetMalwareIDs will be removed and the caller will have to
-    // deal with BLACKLISTED_UNKNOWN state returned from GetBlacklistedIDs.
-    if (state_pair.second == BLACKLISTED_MALWARE ||
-        state_pair.second == BLACKLISTED_UNKNOWN) {
-      malware.insert(state_pair.first);
-    }
-  }
-  callback.Run(malware);
-}
-
-}  // namespace
-
 Blacklist::Observer::Observer(Blacklist* blacklist) : blacklist_(blacklist) {
   blacklist_->AddObserver(this);
 }
@@ -164,24 +37,7 @@ Blacklist::Observer::~Observer() {
   blacklist_->RemoveObserver(this);
 }
 
-Blacklist::ScopedDatabaseManagerForTest::ScopedDatabaseManagerForTest(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager)
-    : original_(GetDatabaseManager()) {
-  SetDatabaseManager(database_manager);
-}
-
-Blacklist::ScopedDatabaseManagerForTest::~ScopedDatabaseManagerForTest() {
-  SetDatabaseManager(original_);
-}
-
 Blacklist::Blacklist(ExtensionPrefs* prefs) {
-  auto& lazy_database_manager = g_database_manager.Get();
-  // Using base::Unretained is safe because when this object goes away, the
-  // subscription will automatically be destroyed.
-  database_changed_subscription_ =
-      lazy_database_manager.RegisterDatabaseChangedCallback(base::BindRepeating(
-          &Blacklist::ObserveNewDatabase, base::Unretained(this)));
-
   ObserveNewDatabase();
 }
 
@@ -197,25 +53,15 @@ void Blacklist::GetBlacklistedIDs(const
                                   const GetBlacklistedIDsCallback& callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
-  if (ids.empty() || !GetDatabaseManager().get()) {
+  if (ids.empty()) {
     base::ThreadTaskRunnerHandle::Get()->PostTask(
         FROM_HERE, base::BindOnce(callback, BlacklistStateMap()));
     return;
   }
-
-  // Constructing the SafeBrowsingClientImpl begins the process of asking
-  // safebrowsing for the blacklisted extensions. The set of blacklisted
-  // extensions returned by SafeBrowsing will then be passed to
-  // GetBlacklistStateIDs to get the particular BlacklistState for each id.
-  SafeBrowsingClientImpl::Start(
-      ids,
-      base::Bind(&Blacklist::GetBlacklistStateForIDs, AsWeakPtr(), callback));
 }
 
 void Blacklist::GetMalwareIDs(const std::set<std::string>& ids,
                               const GetMalwareIDsCallback& callback) {
-  GetBlacklistedIDs(ids, base::Bind(&GetMalwareFromBlacklistStateMap,
-                                    callback));
 }
 
 
@@ -223,7 +69,6 @@ void Blacklist::IsBlacklisted(const std:
                               const IsBlacklistedCallback& callback) {
   std::set<std::string> check;
   check.insert(extension_id);
-  GetBlacklistedIDs(check, base::Bind(&CheckOneExtensionState, callback));
 }
 
 void Blacklist::GetBlacklistStateForIDs(
@@ -340,29 +185,8 @@ void Blacklist::RemoveObserver(Observer*
   observers_.RemoveObserver(observer);
 }
 
-// static
-void Blacklist::SetDatabaseManager(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager) {
-  g_database_manager.Get().set(database_manager);
-}
-
-// static
-scoped_refptr<SafeBrowsingDatabaseManager> Blacklist::GetDatabaseManager() {
-  return g_database_manager.Get().get();
-}
-
 void Blacklist::ObserveNewDatabase() {
-  auto database_manager = GetDatabaseManager();
-  if (database_manager.get()) {
-    // Using base::Unretained is safe because when this object goes away, the
-    // subscription to the callback list will automatically be destroyed.
-    database_updated_subscription_ =
-        database_manager.get()->RegisterDatabaseUpdatedCallback(
-            base::BindRepeating(&Blacklist::NotifyObservers,
-                                base::Unretained(this)));
-  } else {
-    database_updated_subscription_.reset();
-  }
+  database_updated_subscription_.reset();
 }
 
 void Blacklist::NotifyObservers() {
--- a/chrome/browser/extensions/blacklist.h
+++ b/chrome/browser/extensions/blacklist.h
@@ -18,7 +18,6 @@
 #include "base/memory/weak_ptr.h"
 #include "base/observer_list.h"
 #include "components/keyed_service/core/keyed_service.h"
-#include "components/safe_browsing/db/database_manager.h"
 #include "extensions/browser/blacklist_state.h"
 
 namespace content {
@@ -48,20 +47,6 @@ class Blacklist : public KeyedService,
     Blacklist* blacklist_;
   };
 
-  class ScopedDatabaseManagerForTest {
-   public:
-    explicit ScopedDatabaseManagerForTest(
-        scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-            database_manager);
-
-    ~ScopedDatabaseManagerForTest();
-
-   private:
-    scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager> original_;
-
-    DISALLOW_COPY_AND_ASSIGN(ScopedDatabaseManagerForTest);
-  };
-
   using BlacklistStateMap = std::map<std::string, BlacklistState>;
 
   using GetBlacklistedIDsCallback =
@@ -116,13 +101,6 @@ class Blacklist : public KeyedService,
   void RemoveObserver(Observer* observer);
 
  private:
-  // Use via ScopedDatabaseManagerForTest.
-  static void SetDatabaseManager(
-      scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-          database_manager);
-  static scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-      GetDatabaseManager();
-
   void ObserveNewDatabase();
 
   void NotifyObservers();
--- a/chrome/browser/extensions/blacklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blacklist_state_fetcher.cc
@@ -8,9 +8,6 @@
 #include "base/strings/stringprintf.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
-#include "components/safe_browsing/db/v4_protocol_manager_util.h"
 #include "content/public/browser/browser_thread.h"
 #include "net/base/escape.h"
 #include "net/traffic_annotation/network_traffic_annotation.h"
@@ -38,57 +35,6 @@ void BlacklistStateFetcher::Request(cons
 
 void BlacklistStateFetcher::SendRequest(const std::string& id) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  ClientCRXListInfoRequest request;
-  request.set_id(id);
-  std::string request_str;
-  request.SerializeToString(&request_str);
-
-  GURL request_url = GURL();
-  net::NetworkTrafficAnnotationTag traffic_annotation =
-      net::DefineNetworkTrafficAnnotation("extension_blacklist", R"(
-        semantics {
-          sender: "Extension Blacklist"
-          description:
-            "Chromium protects the users from malicious extensions by checking "
-            "extensions that are being installed or have been installed "
-            "against a list of known malwares. Chromium sends the identifiers "
-            "of extensions to Google and Google responds with whether it "
-            "believes each extension is malware or not. Only extensions that "
-            "match the safe browsing blacklist can trigger this request."
-          trigger:
-            "When extensions are being installed and at startup when existing "
-            "extensions are scanned."
-          data: "The identifier of the installed extension."
-          destination: GOOGLE_OWNED_SERVICE
-        }
-        policy {
-          cookies_allowed: YES
-          cookies_store: "Safe Browsing cookies store"
-          setting:
-            "Users can enable or disable this feature by toggling 'Protect you "
-            "and your device from dangerous sites' in Chromium settings under "
-            "Privacy. This feature is enabled by default."
-          chrome_policy {
-            SafeBrowsingEnabled {
-              policy_options {mode: MANDATORY}
-              SafeBrowsingEnabled: false
-            }
-          }
-        })");
-  auto resource_request = std::make_unique<network::ResourceRequest>();
-  resource_request->url = request_url;
-  resource_request->method = "POST";
-  std::unique_ptr<network::SimpleURLLoader> fetcher_ptr =
-      network::SimpleURLLoader::Create(std::move(resource_request),
-                                       traffic_annotation);
-  auto* fetcher = fetcher_ptr.get();
-  fetcher->AttachStringForUpload(request_str, "application/octet-stream");
-  requests_[fetcher] = {std::move(fetcher_ptr), id};
-  fetcher->DownloadToStringOfUnboundedSizeUntilCrashAndDie(
-      url_loader_factory_.get(),
-      base::BindOnce(&BlacklistStateFetcher::OnURLLoaderComplete,
-                     base::Unretained(this), fetcher));
 }
 
 void BlacklistStateFetcher::OnURLLoaderComplete(
@@ -126,12 +72,7 @@ void BlacklistStateFetcher::OnURLLoaderC
 
   BlacklistState state;
   if (net_error == net::OK && response_code == 200) {
-    ClientCRXListInfoResponse response;
-    if (response.ParseFromString(response_body)) {
-      state = static_cast<BlacklistState>(response.verdict());
-    } else {
-      state = BLACKLISTED_UNKNOWN;
-    }
+    state = BLACKLISTED_UNKNOWN;
   } else {
     if (net_error != net::OK) {
       VLOG(1) << "Blacklist request for: " << id
@@ -140,7 +81,6 @@ void BlacklistStateFetcher::OnURLLoaderC
       VLOG(1) << "Blacklist request for: " << id
               << " failed with error: " << response_code;
     }
-
     state = BLACKLISTED_UNKNOWN;
   }
 
--- a/chrome/browser/extensions/blacklist_state_fetcher.h
+++ b/chrome/browser/extensions/blacklist_state_fetcher.h
@@ -13,8 +13,8 @@
 #include "base/callback.h"
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
-#include "components/safe_browsing/db/util.h"
 #include "extensions/browser/blacklist_state.h"
+#include "url/gurl.h"
 
 namespace network {
 class SharedURLLoaderFactory;
--- a/chrome/browser/extensions/blacklist_state_fetcher_unittest.cc
+++ b/chrome/browser/extensions/blacklist_state_fetcher_unittest.cc
@@ -7,7 +7,6 @@
 #include "base/bind.h"
 #include "base/run_loop.h"
 #include "chrome/browser/extensions/test_blacklist_state_fetcher.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
 #include "content/public/test/browser_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
--- a/chrome/browser/extensions/webstore_data_fetcher.cc
+++ b/chrome/browser/extensions/webstore_data_fetcher.cc
@@ -10,7 +10,6 @@
 #include "base/metrics/field_trial_params.h"
 #include "base/values.h"
 #include "chrome/browser/extensions/webstore_data_fetcher_delegate.h"
-#include "components/safe_browsing/features.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/storage_partition.h"
--- a/chrome/browser/interstitials/enterprise_util.cc
+++ b/chrome/browser/interstitials/enterprise_util.cc
@@ -4,44 +4,15 @@
 
 #include "chrome/browser/interstitials/enterprise_util.h"
 
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "content/public/browser/web_contents.h"
 #include "extensions/buildflags/buildflags.h"
 
-namespace {
-
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-extensions::SafeBrowsingPrivateEventRouter* GetEventRouter(
-    content::WebContents* web_contents) {
-  // |web_contents| can be null in tests.
-  if (!web_contents)
-    return nullptr;
-
-  content::BrowserContext* browser_context = web_contents->GetBrowserContext();
-  if (browser_context->IsOffTheRecord())
-    return nullptr;
-
-  return extensions::SafeBrowsingPrivateEventRouterFactory::GetForProfile(
-      browser_context);
-}
-#endif  // BUILDFLAG(ENABLE_EXTENSIONS)
-
-}  // namespace
-
 void MaybeTriggerSecurityInterstitialShownEvent(
     content::WebContents* web_contents,
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialShown(page_url, reason, net_error_code);
-#endif
 }
 
 void MaybeTriggerSecurityInterstitialProceededEvent(
@@ -49,50 +20,4 @@ void MaybeTriggerSecurityInterstitialPro
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialProceeded(page_url, reason,
-                                                net_error_code);
-#endif
-}
-
-std::string GetThreatTypeStringForInterstitial(
-    safe_browsing::SBThreatType threat_type) {
-  switch (threat_type) {
-    case safe_browsing::SB_THREAT_TYPE_URL_PHISHING:
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING:
-      return "PHISHING";
-    case safe_browsing::SB_THREAT_TYPE_URL_MALWARE:
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE:
-      return "MALWARE";
-    case safe_browsing::SB_THREAT_TYPE_URL_UNWANTED:
-    case safe_browsing::SB_THREAT_TYPE_BILLING:
-      return "HARMFUL";
-    case safe_browsing::SB_THREAT_TYPE_UNUSED:
-    case safe_browsing::SB_THREAT_TYPE_SAFE:
-    case safe_browsing::SB_THREAT_TYPE_URL_BINARY_MALWARE:
-    case safe_browsing::SB_THREAT_TYPE_EXTENSION:
-    case safe_browsing::SB_THREAT_TYPE_BLACKLISTED_RESOURCE:
-    case safe_browsing::SB_THREAT_TYPE_API_ABUSE:
-    case safe_browsing::SB_THREAT_TYPE_SUBRESOURCE_FILTER:
-    case safe_browsing::SB_THREAT_TYPE_CSD_WHITELIST:
-    case safe_browsing::
-        DEPRECATED_SB_THREAT_TYPE_URL_PASSWORD_PROTECTION_PHISHING:
-    case safe_browsing::SB_THREAT_TYPE_SAVED_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_SYNC_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_NON_SYNC_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_AD_SAMPLE:
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_POPUP:
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_REDIRECT:
-    case safe_browsing::SB_THREAT_TYPE_SUSPICIOUS_SITE:
-    case safe_browsing::SB_THREAT_TYPE_ENTERPRISE_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_APK_DOWNLOAD:
-    case safe_browsing::SB_THREAT_TYPE_HIGH_CONFIDENCE_ALLOWLIST:
-      NOTREACHED();
-      break;
-  }
-  return std::string();
 }
--- a/chrome/browser/interstitials/enterprise_util.h
+++ b/chrome/browser/interstitials/enterprise_util.h
@@ -5,7 +5,8 @@
 #ifndef CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
 #define CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
 
-#include "components/safe_browsing/db/v4_protocol_manager_util.h"
+#include <string>
+#include "url/gurl.h"
 
 namespace content {
 class WebContents;
@@ -27,7 +28,4 @@ void MaybeTriggerSecurityInterstitialPro
     const std::string& reason,
     int net_error_code);
 
-std::string GetThreatTypeStringForInterstitial(
-    safe_browsing::SBThreatType threat_type);
-
 #endif  // CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
--- a/chrome/browser/metrics/chrome_metrics_service_accessor.h
+++ b/chrome/browser/metrics/chrome_metrics_service_accessor.h
@@ -54,18 +54,6 @@ namespace welcome {
 void JoinOnboardingGroup(Profile* profile);
 }
 
-namespace safe_browsing {
-class ChromeCleanerControllerDelegate;
-class DownloadUrlSBClient;
-class IncidentReportingService;
-class SafeBrowsingService;
-class SafeBrowsingUIManager;
-
-namespace internal {
-class ReporterRunner;
-}  // namespace internal
-}  // namespace safe_browsing
-
 namespace settings {
 class MetricsReportingHandler;
 }
@@ -102,12 +90,6 @@ class ChromeMetricsServiceAccessor : pub
   friend class heap_profiling::BackgroundProfilingTriggers;
   friend class settings::MetricsReportingHandler;
   friend class UmaSessionStats;
-  friend class safe_browsing::ChromeCleanerControllerDelegate;
-  friend class safe_browsing::DownloadUrlSBClient;
-  friend class safe_browsing::IncidentReportingService;
-  friend class safe_browsing::internal::ReporterRunner;
-  friend class safe_browsing::SafeBrowsingService;
-  friend class safe_browsing::SafeBrowsingUIManager;
   friend class ChromeMetricsServiceClient;
   friend class ChromePasswordManagerClient;
   friend void welcome::JoinOnboardingGroup(Profile* profile);
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -48,7 +48,6 @@
 #include "chrome/browser/metrics/sampling_metrics_provider.h"
 #include "chrome/browser/metrics/subprocess_metrics_provider.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/browser/tracing/background_tracing_metrics_provider.h"
--- a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -26,7 +26,6 @@
 #include "chrome/browser/component_updater/crl_set_component_installer.h"
 #include "chrome/browser/net/chrome_mojo_proxy_resolver_factory.h"
 #include "chrome/browser/net/dns_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/ssl_config_service_manager.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/chrome_features.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
@@ -70,9 +70,6 @@ IN_PROC_BROWSER_TEST_F(TrialComparisonCe
 
 IN_PROC_BROWSER_TEST_F(TrialComparisonCertVerifierFeatureEnabledTest,
                        TrialEnabledPrefEnabled) {
-  safe_browsing::SetExtendedReportingPref(browser()->profile()->GetPrefs(),
-                                          true);
-
   ASSERT_TRUE(https_test_server_.Start());
   base::HistogramTester histograms;
   ui_test_utils::NavigateToURL(browser(),
@@ -119,9 +116,6 @@ class TrialComparisonCertVerifierFeature
 IN_PROC_BROWSER_TEST_F(
     TrialComparisonCertVerifierFeatureOverridenByBuiltinVerifierTest,
     TrialEnabledPrefEnabledBuiltVerifierEnabled) {
-  safe_browsing::SetExtendedReportingPref(browser()->profile()->GetPrefs(),
-                                          true);
-
   ASSERT_TRUE(https_test_server_.Start());
   base::HistogramTester histograms;
   ui_test_utils::NavigateToURL(browser(),
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -16,8 +16,6 @@
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/chrome_features.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
@@ -13,9 +13,6 @@
 #include "base/test/scoped_feature_list.h"
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_test_utils.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_service.h"
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_paths.h"
 #include "chrome/test/base/testing_browser_process.h"
@@ -132,12 +129,6 @@ class TrialComparisonCertVerifierControl
     ASSERT_TRUE(profile_manager_->SetUp());
     ASSERT_TRUE(g_browser_process->profile_manager());
 
-    sb_service_ =
-        base::MakeRefCounted<safe_browsing::TestSafeBrowsingService>();
-    TestingBrowserProcess::GetGlobal()->SetSafeBrowsingService(
-        sb_service_.get());
-    g_browser_process->safe_browsing_service()->Initialize();
-
     // SafeBrowsingService expects to be initialized before any profiles are
     // created.
     profile_ = profile_manager_->CreateTestingProfile("profile1");
@@ -172,11 +163,6 @@ class TrialComparisonCertVerifierControl
     // Ensure mock expectations are checked.
     mock_config_client_ = nullptr;
 
-    if (TestingBrowserProcess::GetGlobal()->safe_browsing_service()) {
-      TestingBrowserProcess::GetGlobal()->safe_browsing_service()->ShutDown();
-      TestingBrowserProcess::GetGlobal()->SetSafeBrowsingService(nullptr);
-    }
-
     TrialComparisonCertVerifierController::SetFakeOfficialBuildForTesting(
         false);
   }
@@ -214,7 +200,6 @@ class TrialComparisonCertVerifierControl
   scoped_refptr<CertificateReportingServiceTestHelper>
       reporting_service_test_helper_;
   content::BrowserTaskEnvironment task_environment_;
-  scoped_refptr<safe_browsing::SafeBrowsingService> sb_service_;
   std::unique_ptr<TestingProfileManager> profile_manager_;
   TestingProfile* profile_;
 
@@ -231,10 +216,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Trial should not be allowed.
   EXPECT_FALSE(trial_controller().IsAllowed());
 
-  // Enable the SBER pref, shouldn't matter since it's a non-official build and
-  // field trial isn't enabled.
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
-
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
   // either.
   EXPECT_FALSE(trial_controller().IsAllowed());
@@ -255,7 +236,6 @@ TEST_F(TrialComparisonCertVerifierContro
   CreateController();
 
   EXPECT_FALSE(trial_controller().IsAllowed());
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
 
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
   // either.
@@ -285,7 +265,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // In a real official build, expect the trial config to be updated.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
 #endif
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
 
 #if defined(OFFICIAL_BUILD) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // In a real official build, expect the trial to be allowed now.  (Don't
@@ -322,7 +301,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Enable the SBER pref, which should trigger the OnTrialConfigUpdated
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
 
   // Trial should now be allowed.
   EXPECT_TRUE(trial_controller().IsAllowed());
@@ -369,7 +347,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Disable the SBER pref again, which should trigger the OnTrialConfigUpdated
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(false)).Times(1);
-  safe_browsing::SetExtendedReportingPref(pref_service(), false);
 
   // Not allowed now.
   EXPECT_FALSE(trial_controller().IsAllowed());
@@ -412,7 +389,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
   EXPECT_CALL(mock_config_client_2, OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
 
   // Trial should now be allowed.
   EXPECT_TRUE(trial_controller().IsAllowed());
@@ -467,7 +443,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(false)).Times(1);
   EXPECT_CALL(mock_config_client_2, OnTrialConfigUpdated(false)).Times(1);
-  safe_browsing::SetExtendedReportingPref(pref_service(), false);
 
   // Not allowed now.
   EXPECT_FALSE(trial_controller().IsAllowed());
@@ -498,7 +473,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Enable the SBER pref, which should trigger the OnTrialConfigUpdated
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
 
   // Trial should now be allowed.
   EXPECT_TRUE(trial_controller().IsAllowed());
@@ -530,9 +504,6 @@ TEST_F(TrialComparisonCertVerifierContro
 
   EXPECT_FALSE(trial_controller().IsAllowed());
 
-  // Enable the SBER pref, shouldn't matter since it's an incognito profile.
-  safe_browsing::SetExtendedReportingPref(pref_service(), true);
-
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
   // either.
   EXPECT_FALSE(trial_controller().IsAllowed());
--- a/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ b/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -565,7 +565,6 @@ void ChromePasswordManagerClient::CheckS
   }
 }
 #endif  // defined(ON_FOCUS_PING_ENABLED)
-#endif // BUILDFLAG(FULL_SAFE_BROWSING)
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 void ChromePasswordManagerClient::CheckProtectedPasswordEntry(
@@ -575,6 +574,7 @@ void ChromePasswordManagerClient::CheckP
     bool password_field_exists) {
 }
 #endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#endif // BUILDFLAG(FULL_SAFE_BROWSING)
 
 #if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
 void ChromePasswordManagerClient::LogPasswordReuseDetectedEvent() {
--- a/chrome/browser/password_manager/chrome_password_manager_client.h
+++ b/chrome/browser/password_manager/chrome_password_manager_client.h
@@ -191,7 +191,7 @@ class ChromePasswordManagerClient
       const override;
 #endif
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   void CheckProtectedPasswordEntry(
       password_manager::metrics_util::PasswordType reused_password_type,
       const std::string& username,
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -436,7 +436,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kImportAutofillFormData,
     prefs::kImportDialogAutofillFormData,
     base::Value::Type::BOOLEAN },
-
   { key::kMaxConnectionsPerProxy,
     prefs::kMaxConnectionsPerProxy,
     base::Value::Type::INTEGER },
@@ -893,9 +892,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kReportExtensionsAndPluginsData,
     extensions::enterprise_reporting::kReportExtensionsAndPluginsData,
     base::Value::Type::BOOLEAN },
-  { key::kReportSafeBrowsingData,
-    extensions::enterprise_reporting::kReportSafeBrowsingData,
-    base::Value::Type::BOOLEAN },
 #endif  // !defined(OS_CHROMEOS) && BUILDFLAG(ENABLE_EXTENSIONS)
 
 #if !defined(OS_MACOSX) && !defined(OS_CHROMEOS)
@@ -1248,11 +1244,6 @@ std::unique_ptr<ConfigurationPolicyHandl
       new ConfigurationPolicyHandlerList(
           base::Bind(&PopulatePolicyHandlerParameters),
           base::Bind(&GetChromePolicyDetails)));
-  for (size_t i = 0; i < base::size(kSimplePolicyMap); ++i) {
-    handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
-        kSimplePolicyMap[i].policy_name, kSimplePolicyMap[i].preference_path,
-        kSimplePolicyMap[i].value_type));
-  }
 
   handlers->AddHandler(
       std::make_unique<autofill::AutofillAddressPolicyHandler>());
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -70,7 +70,6 @@
 #include "chrome/browser/ssl/ssl_config_service_manager.h"
 #include "chrome/browser/task_manager/task_manager_interface.h"
 #include "chrome/browser/tracing/chrome_tracing_delegate.h"
-#include "chrome/browser/ui/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "chrome/browser/ui/browser_ui_prefs.h"
 #include "chrome/browser/ui/hats/hats_service.h"
 #include "chrome/browser/ui/navigation_correction_tab_observer.h"
@@ -336,14 +335,11 @@
 #endif
 
 #if defined(OS_WIN)
-#include "chrome/browser/component_updater/sw_reporter_installer_win.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
 #include "chrome/browser/win/conflicts/module_database.h"
 #include "chrome/browser/win/conflicts/third_party_conflicts_manager.h"
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_prefs_manager.h"
 #endif
 
 #if defined(OS_WIN) || defined(OS_MACOSX)
@@ -756,7 +752,6 @@ void RegisterLocalState(PrefRegistrySimp
 
 #if defined(OS_WIN)
   registry->RegisterBooleanPref(prefs::kRendererCodeIntegrityEnabled, true);
-  component_updater::RegisterPrefsForSwReporter(registry);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   IncompatibleApplicationsUpdater::RegisterLocalStatePrefs(registry);
   ModuleDatabase::RegisterLocalStatePrefs(registry);
@@ -838,7 +833,6 @@ void RegisterProfilePrefs(user_prefs::Pr
   PushMessagingAppIdentifier::RegisterProfilePrefs(registry);
   QuietNotificationPermissionUiState::RegisterProfilePrefs(registry);
   RegisterBrowserUserPrefs(registry);
-  SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(registry);
   security_state::RegisterProfilePrefs(registry);
   SessionStartupPref::RegisterProfilePrefs(registry);
   SharingSyncPreference::RegisterProfilePrefs(registry);
@@ -994,11 +988,7 @@ void RegisterProfilePrefs(user_prefs::Pr
 #endif
 
 #if defined(OS_WIN)
-  component_updater::RegisterProfilePrefsForSwReporter(registry);
   NetworkProfileBubble::RegisterProfilePrefs(registry);
-  safe_browsing::SettingsResetPromptPrefsManager::RegisterProfilePrefs(
-      registry);
-  safe_browsing::PostCleanupSettingsResetter::RegisterProfilePrefs(registry);
 #endif
 
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -57,7 +57,6 @@
 #include "chrome/browser/prerender/prerender_message_filter.h"
 #include "chrome/browser/profiles/gaia_info_update_service_factory.h"
 #include "chrome/browser/profiles/renderer_updater_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/browser/search/suggestions/suggestions_service_factory.h"
 #include "chrome/browser/search_engines/template_url_fetcher_factory.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
--- a/chrome/browser/profiles/pref_service_builder_utils.cc
+++ b/chrome/browser/profiles/pref_service_builder_utils.cc
@@ -12,13 +12,13 @@
 #include "base/files/file_util.h"
 #include "base/path_service.h"
 #include "base/sequenced_task_runner.h"
+#include "base/strings/stringprintf.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/policy/chrome_browser_policy_connector.h"
 #include "chrome/browser/prefs/browser_prefs.h"
 #include "chrome/browser/prefs/chrome_pref_service_factory.h"
 #include "chrome/browser/prefs/profile_pref_store_manager.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_constants.h"
 #include "chrome/grit/chromium_strings.h"
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -110,14 +110,6 @@ Polymer({
     },
 
     /** @private */
-    enableSafeBrowsingSubresourceFilter_: {
-      type: Boolean,
-      value: function() {
-        return false;
-      }
-    },
-
-    /** @private */
     privacySettingsRedesignEnabled_: {
       type: Boolean,
       value: function() {
--- a/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
+++ b/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
@@ -196,9 +196,6 @@ const SiteSettingsBehaviorImpl = {
         settings.ContentSettingsTypes.BLUETOOTH_SCANNING,
         'enableExperimentalWebPlatformFeatures');
     addOrRemoveSettingWithFlag(
-        settings.ContentSettingsTypes.ADS,
-        'enableSafeBrowsingSubresourceFilter');
-    addOrRemoveSettingWithFlag(
         settings.ContentSettingsTypes.PAYMENT_HANDLER,
         'enablePaymentHandlerContentSetting');
     addOrRemoveSettingWithFlag(
--- a/chrome/browser/resources/settings/site_settings_page/site_settings_page.html
+++ b/chrome/browser/resources/settings/site_settings_page/site_settings_page.html
@@ -125,17 +125,6 @@
             '$i18nPolymer{siteSettingsBlocked}')]]"
         role-description="$i18n{subpageArrowRoleDescription}"></cr-link-row>
 
-    <template is="dom-if" if="[[enableSafeBrowsingSubresourceFilter_]]">
-      <cr-link-row class="hr two-line" data-route="SITE_SETTINGS_ADS" id="ads"
-          label="$i18n{siteSettingsAds}" on-click="onTapNavigate_"
-          start-icon="settings:ads"
-          sub-label="[[defaultSettingLabel_(
-              default_.ads,
-              '$i18nPolymer{siteSettingsAllowed}',
-              '$i18nPolymer{siteSettingsAdsBlock}')]]"
-          role-description="$i18n{subpageArrowRoleDescription}"></cr-link-row>
-    </template>
-
     <cr-link-row class="hr two-line" data-route="SITE_SETTINGS_BACKGROUND_SYNC"
         id="background-sync" label="$i18n{siteSettingsBackgroundSync}"
         on-click="onTapNavigate_" start-icon="cr:sync"
--- a/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
+++ b/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
@@ -36,14 +36,6 @@ Polymer({
     },
 
     /** @private */
-    enableSafeBrowsingSubresourceFilter_: {
-      type: Boolean,
-      value: function() {
-        return false;
-      }
-    },
-
-    /** @private */
     enableExperimentalWebPlatformFeatures_: {
       type: Boolean,
       value: function() {
--- a/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
+++ b/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
@@ -57,7 +57,6 @@ jumbo_static_library("chrome_cleaner") {
     # TODO(crbug.com/920223): Break dependency cycles with //chrome/browser
     ":public",
     "//chrome/browser/extensions",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui",
     "//chrome/common",
     "//chrome/installer/util:with_no_strings",
@@ -67,7 +66,6 @@ jumbo_static_library("chrome_cleaner") {
     "//components/crx_file",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/common:safe_browsing_prefs",
     "//content/public/browser",
     "//extensions/browser",
     "//third_party/protobuf:protobuf_lite",
--- a/chrome/browser/ssl/security_state_tab_helper.cc
+++ b/chrome/browser/ssl/security_state_tab_helper.cc
@@ -16,8 +16,6 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/known_interception_disclosure_infobar_delegate.h"
 #include "chrome/browser/ssl/tls_deprecation_config.h"
 #include "chrome/common/chrome_features.h"
@@ -28,7 +26,6 @@
 #include "components/omnibox/common/omnibox_features.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/buildflags.h"
 #include "components/security_state/content/content_utils.h"
 #include "components/security_state/core/security_state_pref_names.h"
 #include "content/public/browser/browser_context.h"
@@ -52,10 +49,6 @@
 #include "chrome/browser/chromeos/policy/policy_cert_service_factory.h"
 #endif  // defined(OS_CHROMEOS)
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
-#endif
-
 namespace {
 
 void RecordSecurityLevel(
@@ -119,7 +112,6 @@ bool IsLegacyTLS(GURL url, int connectio
 }  // namespace
 
 using password_manager::metrics_util::PasswordType;
-using safe_browsing::SafeBrowsingUIManager;
 
 SecurityStateTabHelper::SecurityStateTabHelper(
     content::WebContents* web_contents)
--- a/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
+++ b/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
@@ -15,16 +15,13 @@
 #include "chrome/browser/content_settings/tab_specific_content_settings.h"
 #include "chrome/browser/infobars/infobar_service.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/subresource_filter/subresource_filter_content_settings_manager.h"
 #include "chrome/browser/subresource_filter/subresource_filter_profile_context.h"
 #include "chrome/browser/subresource_filter/subresource_filter_profile_context_factory.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings_types.h"
-#include "components/safe_browsing/db/database_manager.h"
 #include "components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.h"
 #include "components/subresource_filter/content/browser/ruleset_service.h"
-#include "components/subresource_filter/content/browser/subresource_filter_safe_browsing_activation_throttle.h"
 #include "components/subresource_filter/core/browser/subresource_filter_features.h"
 #include "components/subresource_filter/core/common/activation_decision.h"
 #include "components/subresource_filter/core/common/activation_scope.h"
@@ -46,10 +43,7 @@ ChromeSubresourceFilterClient::ChromeSub
           Profile::FromBrowserContext(web_contents->GetBrowserContext()));
   settings_manager_ = context->settings_manager();
 
-  subresource_filter::RulesetService* ruleset_service =
-      g_browser_process->subresource_filter_ruleset_service();
-  subresource_filter::VerifiedRulesetDealer::Handle* dealer =
-      ruleset_service ? ruleset_service->GetRulesetDealer() : nullptr;
+  subresource_filter::VerifiedRulesetDealer::Handle* dealer = nullptr;
   throttle_manager_ = std::make_unique<
       subresource_filter::ContentSubresourceFilterThrottleManager>(
       this, dealer, web_contents);
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -74,8 +74,6 @@ jumbo_static_library("ui") {
     "blocked_content/popup_opener_tab_helper.h",
     "blocked_content/popup_tracker.cc",
     "blocked_content/popup_tracker.h",
-    "blocked_content/safe_browsing_triggered_popup_blocker.cc",
-    "blocked_content/safe_browsing_triggered_popup_blocker.h",
     "blocked_content/tab_under_navigation_throttle.cc",
     "blocked_content/tab_under_navigation_throttle.h",
     "blocked_content/url_list_manager.cc",
@@ -338,15 +336,8 @@ jumbo_static_library("ui") {
     }
   }
 
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "webui/reset_password/reset_password_ui.cc",
-      "webui/reset_password/reset_password_ui.h",
-    ]
-  }
-
   # TODO(crbug/925153): Remove this circular dependency.
-  allow_circular_includes_from = [ "//chrome/browser/safe_browsing" ]
+  allow_circular_includes_from = []
   defines = []
   libs = []
 
@@ -397,7 +388,6 @@ jumbo_static_library("ui") {
     "//chrome/browser/resources/omnibox:resources",
     "//chrome/browser/resources/quota_internals:quota_internals_resources",
     "//chrome/browser/resources/usb_internals:resources",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ssl:proto",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/ui/webui/downloads:mojo_bindings",
@@ -478,17 +468,6 @@ jumbo_static_library("ui") {
     "//components/rappor",
     "//components/renderer_context_menu",
     "//components/resources",
-    "//components/safe_browsing:csd_proto",
-    "//components/safe_browsing:features",
-    "//components/safe_browsing/common",
-    "//components/safe_browsing/common:safe_browsing_prefs",
-    "//components/safe_browsing/db:database_manager",
-    "//components/safe_browsing/db:util",
-    "//components/safe_browsing/password_protection",
-    "//components/safe_browsing/password_protection:password_protection_metrics_util",
-    "//components/safe_browsing/triggers:ad_popup_trigger",
-    "//components/safe_browsing/triggers:ad_redirect_trigger",
-    "//components/safe_browsing/web_ui",
     "//components/search",
     "//components/search_engines",
     "//components/security_interstitials/content:security_interstitial_page",
@@ -1302,8 +1281,6 @@ jumbo_static_library("ui") {
       "webui/settings/appearance_handler.h",
       "webui/settings/browser_lifetime_handler.cc",
       "webui/settings/browser_lifetime_handler.h",
-      "webui/settings/change_password_handler.cc",
-      "webui/settings/change_password_handler.h",
       "webui/settings/custom_home_pages_table_model.cc",
       "webui/settings/custom_home_pages_table_model.h",
       "webui/settings/downloads_handler.cc",
@@ -1393,7 +1370,6 @@ jumbo_static_library("ui") {
       "//chrome/browser/profile_resetter:profile_reset_report_proto",
       "//chrome/browser/resource_coordinator:tab_metrics_event_proto",
       "//chrome/browser/resource_coordinator/tab_ranker",
-      "//chrome/browser/safe_browsing:advanced_protection",
       "//chrome/browser/ui/webui/app_management:mojo_bindings",
       "//chrome/common:buildflags",
       "//chrome/common:search_mojom",
@@ -2398,10 +2374,6 @@ jumbo_static_library("ui") {
       "startup/credential_provider_signin_info_fetcher_win.cc",
       "startup/credential_provider_signin_info_fetcher_win.h",
       "views/certificate_viewer_win.cc",
-      "views/chrome_cleaner_dialog_win.cc",
-      "views/chrome_cleaner_dialog_win.h",
-      "views/chrome_cleaner_reboot_dialog_win.cc",
-      "views/chrome_cleaner_reboot_dialog_win.h",
       "views/color_chooser_dialog.cc",
       "views/color_chooser_dialog.h",
       "views/color_chooser_win.cc",
@@ -2422,8 +2394,6 @@ jumbo_static_library("ui") {
       "views/frame/windows_10_caption_button.cc",
       "views/frame/windows_10_caption_button.h",
       "views/network_profile_bubble_view.cc",
-      "views/settings_reset_prompt_dialog.cc",
-      "views/settings_reset_prompt_dialog.h",
       "views/status_icons/status_icon_win.cc",
       "views/status_icons/status_icon_win.h",
       "views/status_icons/status_tray_state_changer_win.cc",
@@ -2445,8 +2415,6 @@ jumbo_static_library("ui") {
       "webui/conflicts/conflicts_handler.h",
       "webui/conflicts/conflicts_ui.cc",
       "webui/conflicts/conflicts_ui.h",
-      "webui/settings/chrome_cleanup_handler_win.cc",
-      "webui/settings/chrome_cleanup_handler_win.h",
       "webui/settings_utils_win.cc",
       "webui/version_handler_win.cc",
       "webui/version_handler_win.h",
@@ -2458,7 +2426,6 @@ jumbo_static_library("ui") {
       "//ui/views/controls/webview",
     ]
     deps += [
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/ui/startup:buildflags",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/credential_provider/common:common_constants",
@@ -3137,10 +3104,6 @@ jumbo_static_library("ui") {
       "views/relaunch_notification/wall_clock_timer.h",
       "views/sad_tab_view.cc",
       "views/sad_tab_view.h",
-      "views/safe_browsing/deep_scanning_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_modal_dialog.h",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.cc",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.cc",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_view_impl.cc",
@@ -4022,15 +3985,6 @@ jumbo_static_library("ui") {
     }
   }
 
-  if (safe_browsing_mode == 1) {
-    deps += [
-      "//chrome/browser/ui/webui/reset_password:mojo_bindings",
-      "//chrome/common/safe_browsing:proto",
-      "//components/safe_browsing:csd_proto",
-      "//components/safe_browsing/password_protection:password_protection_metrics_util",
-    ]
-  }
-
   if (use_dbus) {
     deps += [ "//dbus" ]
   }
--- a/chrome/browser/ui/blocked_content/popup_blocker.cc
+++ b/chrome/browser/ui/blocked_content/popup_blocker.cc
@@ -11,12 +11,10 @@
 #include "chrome/browser/content_settings/host_content_settings_map_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/ui/blocked_content/popup_blocker_tab_helper.h"
-#include "chrome/browser/ui/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "chrome/browser/ui/browser_navigator_params.h"
 #include "chrome/common/chrome_switches.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings.h"
-#include "components/safe_browsing/triggers/ad_popup_trigger.h"
 #include "content/public/browser/page_navigator.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents.h"
@@ -60,13 +58,6 @@ PopupBlockType ShouldBlockPopup(content:
                              blink::TriggeringEventInfo::kFromUntrustedEvent) {
     return PopupBlockType::kNotBlocked;
   }
-
-  auto* safe_browsing_blocker =
-      SafeBrowsingTriggeredPopupBlocker::FromWebContents(web_contents);
-  if (safe_browsing_blocker &&
-      safe_browsing_blocker->ShouldApplyAbusivePopupBlocker()) {
-    return PopupBlockType::kAbusive;
-  }
   return PopupBlockType::kNotBlocked;
 }
 
@@ -122,11 +113,5 @@ bool MaybeBlockPopup(content::WebContent
     return false;
 
   popup_blocker->AddBlockedPopup(params, window_features, block_type);
-  auto* trigger = safe_browsing::AdPopupTrigger::FromWebContents(web_contents);
-  if (trigger) {
-    content::RenderFrameHost* source_frame =
-        GetSourceFrameForPopup(params, open_url_params, web_contents);
-    trigger->PopupWasBlocked(source_frame);
-  }
   return true;
 }
--- a/chrome/browser/ui/blocked_content/popup_blocker_tab_helper.cc
+++ b/chrome/browser/ui/blocked_content/popup_blocker_tab_helper.cc
@@ -14,7 +14,6 @@
 #include "chrome/browser/ui/blocked_content/blocked_window_params.h"
 #include "chrome/browser/ui/blocked_content/list_item_position.h"
 #include "chrome/browser/ui/blocked_content/popup_tracker.h"
-#include "chrome/browser/ui/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "chrome/browser/ui/browser_navigator.h"
 #include "chrome/browser/ui/browser_navigator_params.h"
 #include "chrome/common/chrome_render_frame.mojom.h"
@@ -50,7 +49,6 @@ struct PopupBlockerTabHelper::BlockedReq
 
 PopupBlockerTabHelper::PopupBlockerTabHelper(content::WebContents* web_contents)
     : content::WebContentsObserver(web_contents) {
-  SafeBrowsingTriggeredPopupBlocker::MaybeCreate(web_contents);
 }
 
 PopupBlockerTabHelper::~PopupBlockerTabHelper() {
--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -177,7 +177,6 @@
 #include "components/page_load_metrics/browser/metrics_web_contents_observer.h"
 #include "components/page_load_metrics/common/page_load_metrics.mojom.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/triggers/ad_redirect_trigger.h"
 #include "components/search/search.h"
 #include "components/security_state/content/content_utils.h"
 #include "components/security_state/core/security_state.h"
@@ -1355,10 +1354,6 @@ void Browser::OnDidBlockNavigation(conte
       framebust_helper->AddBlockedUrl(blocked_url, base::BindOnce(on_click));
     }
   }
-  if (auto* trigger =
-          safe_browsing::AdRedirectTrigger::FromWebContents(web_contents)) {
-    trigger->OnDidBlockNavigation(initiator_url);
-  }
 }
 
 content::PictureInPictureResult Browser::EnterPictureInPicture(
--- a/chrome/browser/ui/browser_dialogs.h
+++ b/chrome/browser/ui/browser_dialogs.h
@@ -44,9 +44,6 @@ class AuthChallengeInfo;
 }
 
 namespace safe_browsing {
-class ChromeCleanerController;
-class ChromeCleanerDialogController;
-class ChromeCleanerRebootDialogController;
 class SettingsResetPromptController;
 }  // namespace safe_browsing
 
@@ -271,21 +268,6 @@ void ShowSettingsResetPrompt(
     Browser* browser,
     safe_browsing::SettingsResetPromptController* controller);
 
-// Shows the Chrome Cleanup dialog asking the user if they want to clean their
-// system from unwanted software. This is called when unwanted software has been
-// detected on the system.
-void ShowChromeCleanerPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerDialogController* dialog_controller,
-    safe_browsing::ChromeCleanerController* cleaner_controller);
-
-// Shows the Chrome Cleanup reboot dialog asking the user if they want to
-// restart their computer once a cleanup has finished. This is called when the
-// Chrome Cleanup ends in a reboot required state.
-void ShowChromeCleanerRebootPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerRebootDialogController* dialog_controller);
-
 #endif  // OS_WIN
 
 }  // namespace chrome
--- a/chrome/browser/ui/page_info/page_info.cc
+++ b/chrome/browser/ui/page_info/page_info.cc
@@ -40,7 +40,6 @@
 #include "chrome/browser/permissions/permission_uma_util.h"
 #include "chrome/browser/permissions/permission_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/chrome_ssl_host_state_delegate.h"
 #include "chrome/browser/ssl/chrome_ssl_host_state_delegate_factory.h"
 #include "chrome/browser/ui/page_info/page_info_ui.h"
@@ -59,8 +58,6 @@
 #include "components/content_settings/core/common/content_settings_utils.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/password_protection/metrics_util.h"
-#include "components/safe_browsing/proto/csd.pb.h"
 #include "components/security_state/core/features.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/ssl_errors/error_info.h"
@@ -104,8 +101,6 @@ using base::ASCIIToUTF16;
 using base::UTF16ToUTF8;
 using base::UTF8ToUTF16;
 using content::BrowserThread;
-using safe_browsing::LoginReputationClientResponse;
-using safe_browsing::RequestOutcome;
 
 namespace {
 
@@ -338,7 +333,6 @@ PageInfo::PageInfo(
       show_info_bar_(false),
       site_url_(url),
       site_identity_status_(SITE_IDENTITY_STATUS_UNKNOWN),
-      safe_browsing_status_(SAFE_BROWSING_STATUS_NONE),
       safety_tip_info_({security_state::SafetyTipStatus::kUnknown, GURL()}),
       site_connection_status_(SITE_CONNECTION_STATUS_UNKNOWN),
       show_ssl_decision_revoke_button_(false),
@@ -782,14 +776,6 @@ __attribute__((optnone)) void PageInfo::
 
   if (visible_security_state.malicious_content_status !=
       security_state::MALICIOUS_CONTENT_STATUS_NONE) {
-    // The site has been flagged by Safe Browsing. Takes precedence over TLS.
-    base::string16 safe_browsing_details;
-    GetSafeBrowsingStatusByMaliciousContentStatus(
-        visible_security_state.malicious_content_status, &safe_browsing_status_,
-        &safe_browsing_details);
-#if defined(OS_ANDROID)
-    identity_status_description_android_ = safe_browsing_details;
-#endif
 
 #if BUILDFLAG(FULL_SAFE_BROWSING)
     bool old_show_change_pw_buttons = show_change_password_buttons_;
@@ -1042,7 +1028,6 @@ void PageInfo::PresentSiteIdentity() {
   info.connection_status = site_connection_status_;
   info.connection_status_description = UTF16ToUTF8(site_connection_details_);
   info.identity_status = site_identity_status_;
-  info.safe_browsing_status = safe_browsing_status_;
   if (base::FeatureList::IsEnabled(security_state::features::kSafetyTipUI)) {
     info.safety_tip_info = safety_tip_info_;
   }
--- a/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
+++ b/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
@@ -6,31 +6,11 @@
 
 #include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_dialog_delegate.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_contents_view_delegate.h"
 #include "content/public/common/drop_data.h"
 
 namespace {
-
-void DeepScanCompletionCallback(
-    content::WebContentsViewDelegate::DropCompletionCallback callback,
-    const safe_browsing::DeepScanningDialogDelegate::Data& data,
-    const safe_browsing::DeepScanningDialogDelegate::Result& result) {
-  // If any result is negative, block the drop.
-  const auto all_true_fn = [](const auto& vec) {
-    return std::all_of(vec.cbegin(), vec.cend(), [](bool b) { return b; });
-  };
-  bool all_true =
-      all_true_fn(result.text_results) && all_true_fn(result.paths_results);
-
-  std::move(callback).Run(
-      all_true
-          ? content::WebContentsViewDelegate::DropCompletionResult::kContinue
-          : content::WebContentsViewDelegate::DropCompletionResult::kAbort);
-}
-
 }  // namespace
 
 void HandleOnPerformDrop(
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -51,8 +51,6 @@
 #include "chrome/browser/profiles/profile_key.h"
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
 #include "chrome/browser/resource_coordinator/tab_helper.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer.h"
-#include "chrome/browser/safe_browsing/trigger_creator.h"
 #include "chrome/browser/sessions/session_tab_helper.h"
 #include "chrome/browser/ssl/connection_help_tab_helper.h"
 #include "chrome/browser/ssl/security_state_tab_helper.h"
@@ -210,10 +208,6 @@ void TabHelpers::AttachTabHelpers(WebCon
   ChromePasswordManagerClient::CreateForWebContentsWithAutofillClient(
       web_contents,
       autofill::ChromeAutofillClient::FromWebContents(web_contents));
-  if (base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter)) {
-    ChromeSubresourceFilterClient::CreateForWebContents(web_contents);
-  }
   ChromeTranslateClient::CreateForWebContents(web_contents);
   client_hints::ClientHints::CreateForWebContents(web_contents);
   ConnectionHelpTabHelper::CreateForWebContents(web_contents);
--- a/chrome/browser/ui/views/accessibility/invert_bubble_view.cc
+++ b/chrome/browser/ui/views/accessibility/invert_bubble_view.cc
@@ -36,18 +36,18 @@
 namespace {
 
 constexpr char kHighContrastExtensionUrl[] =
-    "https://chrome.google.com/webstore/detail/"
+    "https://chrome.9oo91e.qjz9zk/webstore/detail/"
     "djcfdncoelnlbldjfhinnjlhdjlikmph";
 constexpr char kDarkThemeSearchUrl[] =
-    "https://chrome.google.com/webstore/category/collection/dark_themes";
+    "https://chrome.9oo91e.qjz9zk/webstore/category/collection/dark_themes";
 constexpr char kLearnMoreUrl[] =
-    "https://groups.google.com/a/googleproductforums.com/d/topic/chrome/"
+    "https://groups.9oo91e.qjz9zk/a/9oo91eproductforums.qjz9zk/d/topic/chrome/"
     "Xrco2HsXS-8/discussion";
 
 // Tag value used to uniquely identify the "learn more" (?) button.
 constexpr int kLearnMoreButton = 100;
 
-std::unique_ptr<views::View> CreateExtraView(views::ButtonListener* listener) {
+std::unique_ptr<views::View> CreateInvertedView(views::ButtonListener* listener) {
   auto learn_more = views::CreateVectorImageButton(listener);
   views::SetImageFromVectorIcon(learn_more.get(),
                                 vector_icons::kHelpOutlineIcon);
@@ -95,7 +95,7 @@ InvertBubbleView::InvertBubbleView(Brows
   DialogDelegate::set_buttons(ui::DIALOG_BUTTON_OK);
   DialogDelegate::set_button_label(ui::DIALOG_BUTTON_OK,
                                    l10n_util::GetStringUTF16(IDS_DONE));
-  DialogDelegate::SetExtraView(::CreateExtraView(this));
+  DialogDelegate::SetExtraView(::CreateInvertedView(this));
   set_margins(gfx::Insets());
   chrome::RecordDialogCreation(chrome::DialogIdentifier::INVERT);
 }
--- a/chrome/browser/ui/views/download/download_item_view.cc
+++ b/chrome/browser/ui/views/download/download_item_view.cc
@@ -32,11 +32,6 @@
 #include "chrome/browser/download/drag_download_item.h"
 #include "chrome/browser/icon_loader.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/themes/theme_properties.h"
 #include "chrome/browser/ui/tab_modal_confirm_dialog.h"
 #include "chrome/browser/ui/views/chrome_typography.h"
@@ -659,12 +654,6 @@ void DownloadItemView::ButtonPressed(vie
   if (IsShowingDeepScanning() && sender == open_button_) {
     content::WebContents* current_web_contents =
         shelf_->browser()->tab_strip_model()->GetActiveWebContents();
-    open_now_modal_dialog_ = TabModalConfirmDialog::Create(
-        std::make_unique<safe_browsing::DeepScanningModalDialog>(
-            current_web_contents,
-            base::BindOnce(&DownloadItemView::OpenDownloadDuringAsyncScanning,
-                           weak_ptr_factory_.GetWeakPtr())),
-        current_web_contents);
     return;
   }
 
@@ -1062,15 +1051,10 @@ void DownloadItemView::ShowWarningDialog
 gfx::ImageSkia DownloadItemView::GetWarningIcon() {
   switch (model_->GetDangerType()) {
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT:
-      if (safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              model()->profile())
-              ->RequestsAdvancedProtectionVerdicts()) {
-        return gfx::CreateVectorIcon(
-            vector_icons::kErrorIcon, GetErrorIconSize(),
-            GetNativeTheme()->GetSystemColor(
-                ui::NativeTheme::kColorId_AlertSeverityMedium));
-      }
-      FALLTHROUGH;
+      return gfx::CreateVectorIcon(
+          vector_icons::kErrorIcon, GetErrorIconSize(),
+          GetNativeTheme()->GetSystemColor(
+              ui::NativeTheme::kColorId_AlertSeverityMedium));
 
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -137,7 +137,6 @@
 #include "components/omnibox/browser/omnibox_popup_view.h"
 #include "components/omnibox/browser/omnibox_view.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/password_protection/metrics_util.h"
 #include "components/sessions/core/tab_restore_service.h"
 #include "components/translate/core/browser/language_state.h"
 #include "components/version_info/channel.h"
--- a/chrome/browser/ui/views/frame/browser_window_factory.cc
+++ b/chrome/browser/ui/views/frame/browser_window_factory.cc
@@ -8,7 +8,6 @@
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/frame/native_browser_frame_factory.h"
 #include "chrome/grit/chromium_strings.h"
-#include "components/safe_browsing/password_protection/metrics_util.h"
 #if defined(USE_AURA)
 #include "ui/aura/client/aura_constants.h"
 #include "ui/aura/window.h"
--- a/chrome/browser/ui/webui/downloads/downloads_ui.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_ui.cc
@@ -15,8 +15,6 @@
 #include "base/values.h"
 #include "chrome/browser/defaults.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/webui/downloads/downloads.mojom.h"
 #include "chrome/browser/ui/webui/downloads/downloads_dom_handler.h"
 #include "chrome/browser/ui/webui/managed_ui_handler.h"
@@ -70,12 +68,6 @@ content::WebUIDataSource* CreateDownload
       kGeneratedPath, IDR_DOWNLOADS_DOWNLOADS_HTML);
 #endif
 
-  bool requests_ap_verdicts =
-      safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-          profile)
-          ->RequestsAdvancedProtectionVerdicts();
-  source->AddBoolean("requestsApVerdicts", requests_ap_verdicts);
-
   static constexpr webui::LocalizedString kStrings[] = {
       {"title", IDS_DOWNLOAD_TITLE},
       {"searchResultsPlural", IDS_SEARCH_RESULTS_PLURAL},
@@ -130,11 +122,8 @@ content::WebUIDataSource* CreateDownload
 
   source->AddLocalizedString("dangerDownloadDesc",
                              IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD);
-  source->AddLocalizedString(
-      "dangerUncommonDesc",
-      requests_ap_verdicts
-          ? IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD_IN_ADVANCED_PROTECTION
-          : IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
+  source->AddLocalizedString("dangerUncommonDesc",
+                             IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
   source->AddLocalizedString("dangerSettingsDesc",
                              IDS_BLOCK_REASON_UNWANTED_DOWNLOAD);
 
--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -14,10 +14,6 @@
 #include "chrome/browser/lookalikes/lookalike_url_controller_client.h"
 #include "chrome/browser/lookalikes/lookalike_url_interstitial_page.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_blocking_page.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_blocking_page_quiet.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/bad_clock_blocking_page.h"
 #include "chrome/browser/ssl/blocked_interception_blocking_page.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
@@ -25,7 +21,6 @@
 #include "chrome/common/buildflags.h"
 #include "chrome/common/url_constants.h"
 #include "components/grit/components_resources.h"
-#include "components/safe_browsing/db/database_manager.h"
 #include "components/security_interstitials/content/origin_policy_ui.h"
 #include "components/security_interstitials/core/ssl_error_options_mask.h"
 #include "components/security_interstitials/core/ssl_error_ui.h"
@@ -56,8 +51,6 @@
 #include "chrome/browser/supervised_user/supervised_user_interstitial.h"
 #endif
 
-using security_interstitials::TestSafeBrowsingBlockingPageQuiet;
-
 namespace {
 
 // NSS requires that serial numbers be unique even for the same issuer;
--- a/chrome/browser/ui/webui/management_ui.cc
+++ b/chrome/browser/ui/webui/management_ui.cc
@@ -16,7 +16,6 @@
 #include "chrome/grit/browser_resources.h"
 #include "chrome/grit/generated_resources.h"
 #include "chrome/grit/theme_resources.h"
-#include "components/safe_browsing/common/safebrowsing_constants.h"
 #include "components/strings/grit/components_strings.h"
 #include "extensions/buildflags/buildflags.h"
 #include "ui/base/l10n/l10n_util.h"
@@ -102,10 +101,6 @@ content::WebUIDataSource* CreateManageme
 
   AddLocalizedStringsBulk(source, kLocalizedStrings);
 
-  source->AddString(kManagementExtensionReportSafeBrowsingWarnings,
-                    l10n_util::GetStringFUTF16(
-                        IDS_MANAGEMENT_EXTENSION_REPORT_SAFE_BROWSING_WARNINGS,
-                        base::UTF8ToUTF16(safe_browsing::kSafeBrowsingUrl)));
 #if defined(OS_CHROMEOS)
   source->AddString("managementDeviceLearnMoreUrl",
                     chrome::kLearnMoreEnterpriseURL);
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -114,7 +114,6 @@
 #endif
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
 #include "device/fido/win/webauthn_api.h"
 
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -66,9 +66,6 @@
 #include "printing/buildflags/buildflags.h"
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_win.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
-#include "chrome/browser/ui/webui/settings/chrome_cleanup_handler_win.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/ui/webui/settings/incompatible_applications_handler_win.h"
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
@@ -240,10 +237,6 @@ SettingsUI::SettingsUI(content::WebUI* w
   AddSettingsPageUIHandler(std::make_unique<PrintingHandler>());
 #endif
 
-#if defined(OS_WIN)
-  AddSettingsPageUIHandler(std::make_unique<ChromeCleanupHandler>(profile));
-#endif  // defined(OS_WIN)
-
 #if defined(OS_WIN) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   bool has_incompatible_applications =
       IncompatibleApplicationsUpdater::HasCachedApplications();
--- a/chrome/browser/win/conflicts/BUILD.gn
+++ b/chrome/browser/win/conflicts/BUILD.gn
@@ -31,7 +31,6 @@ source_set("module_info") {
 
   deps = [
     "//base:i18n",
-    "//chrome/common/safe_browsing:pe_image_reader",
   ]
 
   libs = [ "crypt32.lib" ]
--- a/chrome/browser/win/conflicts/module_info_util.cc
+++ b/chrome/browser/win/conflicts/module_info_util.cc
@@ -21,7 +21,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/win/scoped_handle.h"
 #include "base/win/wincrypt_shim.h"
-#include "chrome/common/safe_browsing/pe_image_reader_win.h"
 
 // This must be after wincrypt and wintrust.
 #include <mscat.h>
@@ -322,13 +321,6 @@ bool GetModuleImageSizeAndTimeDateStamp(
   if (bytes_read == -1)
     return false;
 
-  safe_browsing::PeImageReader pe_image_reader;
-  if (!pe_image_reader.Initialize(buffer.get(), bytes_read))
-    return false;
-
-  *size_of_image = pe_image_reader.GetSizeOfImage();
-  *time_date_stamp = pe_image_reader.GetCoffFileHeader()->TimeDateStamp;
-
   return true;
 }
 
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -229,7 +229,6 @@ static_library("common") {
     "//components/policy/core/common",
     "//components/prefs",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/web_ui:constants",
     "//components/services/heap_profiling/public/cpp",
     "//components/strings",
     "//components/translate/content/common",
@@ -435,7 +434,6 @@ static_library("common") {
   if (is_win) {
     deps += [
       "//chrome/chrome_elf:chrome_elf_main_include",
-      "//chrome/common/win:eventlog_messages",
       "//components/crash/content/app:crash_export_thunk_include",
     ]
 
@@ -496,10 +494,6 @@ static_library("common") {
     }
   }
 
-  if (safe_browsing_mode != 0) {
-    public_deps += [ "//chrome/common/safe_browsing" ]
-  }
-
   if (is_linux) {
     deps += [ "//sandbox/linux:sandbox_services" ]
   }
@@ -771,10 +765,6 @@ mojom("mojo_bindings") {
     public_deps += [ "//components/remote_cocoa/common:mojo" ]
   }
 
-  if (safe_browsing_mode == 1) {
-    public_deps += [ "//chrome/services/file_util/public/mojom" ]
-  }
-
   overridden_deps = [
     "//third_party/blink/public/mojom:mojom_platform",
     "//content/public/common:interfaces",
--- a/chrome/common/extensions/api/api_sources.gni
+++ b/chrome/common/extensions/api/api_sources.gni
@@ -51,7 +51,6 @@ schema_sources_ = [
   "passwords_private.idl",
   "permissions.json",
   "resources_private.idl",
-  "safe_browsing_private.idl",
   "sessions.json",
   "settings_private.idl",
   "signed_in_devices.idl",
--- a/chrome/common/features.gni
+++ b/chrome/common/features.gni
@@ -88,6 +88,5 @@ chrome_grit_defines = [
   "enable_supervised_users=$enable_supervised_users",
   "enable_vr=$enable_vr",
   "enable_webui_tab_strip=$enable_webui_tab_strip",
-  "safe_browsing_mode=$safe_browsing_mode",
   "optimize_webui=$optimize_webui",
 ]
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -91,21 +91,6 @@ if (safe_browsing_mode == 1) {
 
   source_set("binary_feature_extractor") {
     sources = [
-      "binary_feature_extractor.cc",
-      "binary_feature_extractor.h",
-      "binary_feature_extractor_mac.cc",
-      "binary_feature_extractor_win.cc",
-      "mach_o_image_reader_mac.cc",
-      "mach_o_image_reader_mac.h",
-    ]
-    if (is_posix) {
-      sources += [ "binary_feature_extractor_posix.cc" ]
-    }
-
-    public_deps = [
-      "//base",
-      "//components/safe_browsing:csd_proto",
-      "//crypto",
     ]
 
     if (is_win) {
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -7,7 +7,6 @@
 #include "base/stl_util.h"
 #include "base/strings/string_piece.h"
 #include "components/nacl/common/buildflags.h"
-#include "components/safe_browsing/web_ui/constants.h"
 #include "extensions/buildflags/buildflags.h"
 
 namespace chrome {
@@ -538,7 +537,6 @@ const char* const kChromeHostURLs[] = {
     kChromeUISignInInternalsHost,
     kChromeUISiteEngagementHost,
     kChromeUINTPTilesInternalsHost,
-    safe_browsing::kChromeUISafeBrowsingHost,
     kChromeUISuggestionsHost,
     kChromeUISupervisedUserInternalsHost,
     kChromeUISyncInternalsHost,
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -150,8 +150,6 @@ jumbo_static_library("renderer") {
     "//components/rappor/public/mojom",
     "//components/resources:components_resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/common:interfaces",
-    "//components/safe_browsing/renderer:throttles",
     "//components/security_interstitials/content/renderer:security_interstitial_page_controller",
     "//components/security_interstitials/core:",
     "//components/security_interstitials/core/common/mojom:",
@@ -248,40 +246,6 @@ jumbo_static_library("renderer") {
     deps += [ "//third_party/widevine/cdm:headers" ]
   }
 
-  if (safe_browsing_mode != 0) {
-    deps += [
-      "//components/safe_browsing/common",
-      "//components/safe_browsing/renderer",
-    ]
-    if (safe_browsing_mode == 1) {
-      sources += [
-        "safe_browsing/feature_extractor_clock.cc",
-        "safe_browsing/feature_extractor_clock.h",
-        "safe_browsing/features.cc",
-        "safe_browsing/features.h",
-        "safe_browsing/murmurhash3_util.cc",
-        "safe_browsing/murmurhash3_util.h",
-        "safe_browsing/phishing_classifier.cc",
-        "safe_browsing/phishing_classifier.h",
-        "safe_browsing/phishing_classifier_delegate.cc",
-        "safe_browsing/phishing_classifier_delegate.h",
-        "safe_browsing/phishing_dom_feature_extractor.cc",
-        "safe_browsing/phishing_dom_feature_extractor.h",
-        "safe_browsing/phishing_term_feature_extractor.cc",
-        "safe_browsing/phishing_term_feature_extractor.h",
-        "safe_browsing/phishing_url_feature_extractor.cc",
-        "safe_browsing/phishing_url_feature_extractor.h",
-        "safe_browsing/scorer.cc",
-        "safe_browsing/scorer.h",
-      ]
-      deps += [
-        "//chrome/common/safe_browsing:proto",
-        "//components/safe_browsing:csd_proto",
-        "//third_party/smhasher:murmurhash3",
-      ]
-    }
-  }
-
   if (enable_extensions) {
     sources += [
       "extensions/accessibility_private_hooks_delegate.cc",
@@ -441,10 +405,6 @@ jumbo_static_library("test_support") {
   sources = [
     "chrome_mock_render_thread.cc",
     "chrome_mock_render_thread.h",
-    "safe_browsing/mock_feature_extractor_clock.cc",
-    "safe_browsing/mock_feature_extractor_clock.h",
-    "safe_browsing/test_utils.cc",
-    "safe_browsing/test_utils.h",
   ]
 
   deps = [
@@ -455,11 +415,4 @@ jumbo_static_library("test_support") {
     "//testing/gmock",
     "//testing/gtest",
   ]
-
-  if (is_android) {
-    sources -= [
-      "safe_browsing/mock_feature_extractor_clock.cc",
-      "safe_browsing/mock_feature_extractor_clock.h",
-    ]
-  }
 }
--- a/chrome/renderer/url_loader_throttle_provider_impl.cc
+++ b/chrome/renderer/url_loader_throttle_provider_impl.cc
@@ -22,8 +22,6 @@
 #include "components/data_reduction_proxy/content/common/data_reduction_proxy_url_loader_throttle.h"
 #include "components/data_reduction_proxy/core/common/data_reduction_proxy_params.h"
 #include "components/data_reduction_proxy/core/common/data_reduction_proxy_throttle_manager.h"
-#include "components/safe_browsing/features.h"
-#include "components/safe_browsing/renderer/renderer_url_loader_throttle.h"
 #include "content/public/common/content_features.h"
 #include "content/public/renderer/render_frame.h"
 #include "content/public/renderer/render_thread.h"
@@ -112,7 +110,6 @@ URLLoaderThrottleProviderImpl::URLLoader
     : type_(type),
       chrome_content_renderer_client_(chrome_content_renderer_client) {
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
   if (data_reduction_proxy::params::IsEnabledWithNetworkService()) {
     broker->GetInterface(
         data_reduction_proxy_remote_.InitWithNewPipeAndPassReceiver());
@@ -128,10 +125,6 @@ URLLoaderThrottleProviderImpl::URLLoader
     : type_(other.type_),
       chrome_content_renderer_client_(other.chrome_content_renderer_client_) {
   DETACH_FROM_THREAD(thread_checker_);
-  if (other.safe_browsing_) {
-    other.safe_browsing_->Clone(
-        safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
-  }
   if (other.data_reduction_proxy_) {
     other.data_reduction_proxy_->Clone(
         data_reduction_proxy_remote_.InitWithNewPipeAndPassReceiver());
@@ -142,8 +135,6 @@ URLLoaderThrottleProviderImpl::URLLoader
 std::unique_ptr<content::URLLoaderThrottleProvider>
 URLLoaderThrottleProviderImpl::Clone() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_));
   if (data_reduction_proxy_remote_)
     data_reduction_proxy_.Bind(std::move(data_reduction_proxy_remote_));
   return base::WrapUnique(new URLLoaderThrottleProviderImpl(*this));
@@ -180,14 +171,6 @@ URLLoaderThrottleProviderImpl::CreateThr
             net::HttpRequestHeaders(), data_reduction_proxy_manager_.get()));
   }
 
-  if (!is_frame_resource) {
-    if (safe_browsing_remote_)
-      safe_browsing_.Bind(std::move(safe_browsing_remote_));
-    throttles.push_back(
-        std::make_unique<safe_browsing::RendererURLLoaderThrottle>(
-            safe_browsing_.get(), render_frame_id));
-  }
-
   if (type_ == content::URLLoaderThrottleProviderType::kFrame &&
       !is_frame_resource) {
     content::RenderFrame* render_frame =
--- a/chrome/renderer/url_loader_throttle_provider_impl.h
+++ b/chrome/renderer/url_loader_throttle_provider_impl.h
@@ -10,7 +10,6 @@
 
 #include "base/threading/thread_checker.h"
 #include "components/data_reduction_proxy/core/common/data_reduction_proxy.mojom.h"
-#include "components/safe_browsing/common/safe_browsing.mojom.h"
 #include "content/public/renderer/url_loader_throttle_provider.h"
 #include "extensions/buildflags/buildflags.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
@@ -55,9 +54,6 @@ class URLLoaderThrottleProviderImpl
   content::URLLoaderThrottleProviderType type_;
   ChromeContentRendererClient* const chrome_content_renderer_client_;
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
   mojo::PendingRemote<data_reduction_proxy::mojom::DataReductionProxy>
       data_reduction_proxy_remote_;
   mojo::Remote<data_reduction_proxy::mojom::DataReductionProxy>
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
@@ -6,7 +6,6 @@
 
 #include <utility>
 
-#include "components/safe_browsing/renderer/websocket_sb_handshake_throttle.h"
 #include "content/public/common/service_names.mojom.h"
 #include "content/public/renderer/render_thread.h"
 #include "third_party/blink/public/platform/websocket_handshake_throttle.h"
@@ -14,7 +13,6 @@
 WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
     blink::ThreadSafeBrowserInterfaceBrokerProxy* broker) {
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 WebSocketHandshakeThrottleProviderImpl::
@@ -25,18 +23,12 @@ WebSocketHandshakeThrottleProviderImpl::
 WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
     const WebSocketHandshakeThrottleProviderImpl& other) {
   DETACH_FROM_THREAD(thread_checker_);
-  DCHECK(other.safe_browsing_);
-  other.safe_browsing_->Clone(
-      safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 std::unique_ptr<content::WebSocketHandshakeThrottleProvider>
 WebSocketHandshakeThrottleProviderImpl::Clone(
     scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
   return base::WrapUnique(new WebSocketHandshakeThrottleProviderImpl(*this));
 }
 
@@ -45,9 +37,5 @@ WebSocketHandshakeThrottleProviderImpl::
     int render_frame_id,
     scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
-  return std::make_unique<safe_browsing::WebSocketSBHandshakeThrottle>(
-      safe_browsing_.get(), render_frame_id);
+  return 0;
 }
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.h
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.h
@@ -9,7 +9,6 @@
 
 #include "base/macros.h"
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/common/safe_browsing.mojom.h"
 #include "content/public/renderer/websocket_handshake_throttle_provider.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
@@ -37,9 +36,6 @@ class WebSocketHandshakeThrottleProvider
   WebSocketHandshakeThrottleProviderImpl(
       const WebSocketHandshakeThrottleProviderImpl& other);
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
   THREAD_CHECKER(thread_checker_);
 
   DISALLOW_ASSIGN(WebSocketHandshakeThrottleProviderImpl);
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -195,7 +195,6 @@ static_library("test_support") {
     "//components/performance_manager/test_support",
     "//components/prefs:test_support",
     "//components/rappor:test_support",
-    "//components/safe_browsing/db:v4_test_util",
     "//components/search_engines:test_support",
     "//components/sessions:test_support",
     "//components/signin/public/base:test_support",
@@ -705,7 +704,6 @@ if (!is_android) {
       "//components/policy:chrome_settings_proto_generated_compile",
       "//components/resources",
       "//components/safe_browsing:buildflags",
-      "//components/safe_browsing/db:test_database_manager",
       "//components/services/paint_preview_compositor/public/mojom",
       "//components/services/patch/public/mojom",
       "//components/services/quarantine:test_support",
@@ -910,7 +908,6 @@ if (!is_android) {
       "../browser/domain_reliability/browsertest.cc",
       "../browser/download/download_browsertest.cc",
       "../browser/download/download_browsertest.h",
-      "../browser/download/download_danger_prompt_browsertest.cc",
       "../browser/download/download_frame_policy_browsertest.cc",
       "../browser/download/download_started_animation_browsertest.cc",
       "../browser/download/save_page_browsertest.cc",
@@ -1132,10 +1129,6 @@ if (!is_android) {
       "../browser/resource_coordinator/local_site_characteristics_database_browsertest.cc",
       "../browser/resource_coordinator/tab_activity_watcher_browsertest.cc",
       "../browser/resource_coordinator/tab_manager_browsertest.cc",
-      "../browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc",
-      "../browser/safe_browsing/download_protection/download_protection_service_browsertest.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.h",
       "../browser/safe_xml_parser_browsertest.cc",
       "../browser/search/ntp_custom_background_enabled_policy_handler_browsertest.cc",
       "../browser/search_engines/template_url_scraper_browsertest.cc",
@@ -1159,7 +1152,6 @@ if (!is_android) {
       "../browser/site_isolation/site_details_browsertest.cc",
       "../browser/ssl/known_interception_disclosure_ui_browsertest.cc",
       "../browser/ui/blocked_content/popup_tracker_browsertest.cc",
-      "../browser/ui/blocked_content/safe_browsing_triggered_popup_blocker_browsertest.cc",
       "../browser/ui/blocked_content/tab_under_blocker_browsertest.cc",
       "../browser/ui/managed_ui_browsertest.cc",
       "../browser/ui/manifest_web_app_browsertest.cc",
@@ -1824,16 +1816,6 @@ if (!is_android) {
         "../browser/extensions/worker_apitest.cc",
         "../browser/notifications/notification_permission_context_apitest.cc",
         "../browser/policy/extension_policy_browsertest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_dialog_controller_impl_browsertest_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_reboot_dialog_controller_impl_browsertest_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.h",
-        "../browser/safe_browsing/chrome_cleaner/settings_resetter_browsertest_win.cc",
-        "../browser/safe_browsing/settings_reset_prompt/default_settings_fetcher_browsertest.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_dependency_browsertest_win.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_browsertest_win.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
         "../browser/ui/views/extensions/extension_dialog_browsertest.cc",
         "../browser/ui/views/extensions/pwa_confirmation_bubble_view_browsertest.cc",
         "../browser/ui/web_applications/test/bookmark_app_navigation_browsertest.cc",
@@ -1990,7 +1972,6 @@ if (!is_android) {
         "../browser/ui/views/payments/shipping_option_view_controller_browsertest.cc",
         "../browser/ui/views/profiles/profile_menu_view_browsertest.cc",
         "../browser/ui/views/qrcode_generator/qrcode_generator_bubble_browsertest.cc",
-        "../browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog_browsertest.cc",
         "../browser/ui/views/select_file_dialog_extension_browsertest.cc",
         "../browser/ui/views/session_crashed_bubble_view_browsertest.cc",
         "../browser/ui/views/status_bubble_views_browsertest.cc",
@@ -2495,23 +2476,6 @@ if (!is_android) {
         "../browser/feature_engagement/new_tab/new_tab_tracker_browsertest.cc",
       ]
     }
-    if (safe_browsing_mode == 1) {
-      sources += [
-        "../browser/safe_browsing/ad_redirect_trigger_browsertest.cc",
-        "../browser/safe_browsing/certificate_reporting_service_browsertest.cc",
-        "../browser/safe_browsing/chrome_password_protection_service_browsertest.cc",
-        "../browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc",
-        "../browser/safe_browsing/client_side_detection_host_browsertest.cc",
-        "../browser/safe_browsing/safe_browsing_blocking_page_test.cc",
-        "../browser/safe_browsing/safe_browsing_navigation_observer_browsertest.cc",
-        "../browser/safe_browsing/safe_browsing_service_browsertest.cc",
-        "../browser/safe_browsing/v4_embedded_test_server_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-        "../renderer/safe_browsing/phishing_dom_feature_extractor_browsertest.cc",
-        "../renderer/safe_browsing/threat_dom_details_browsertest.cc",
-      ]
-    }
     if (enable_captive_portal_detection) {
       sources += [ "../browser/captive_portal/captive_portal_browsertest.cc" ]
     }
@@ -2562,15 +2526,6 @@ if (!is_android) {
       ]
 
       data += [ "//testing/buildbot/filters/mac_window_server_killers.browser_tests.filter" ]
-
-      if (safe_browsing_mode == 1) {
-        sources -= [
-          # single-process mode hangs on Mac sometimes because of multiple UI
-          # message loops. See 306348
-          "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-          "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-        ]
-      }
     }
     if (is_win) {
       sources += [
@@ -2702,14 +2657,6 @@ if (!is_android) {
     } else if (enable_extensions) {
       sources -= [ "../browser/extensions/api/braille_display_private/braille_display_private_apitest.cc" ]
     }
-    if (is_chrome_branded && safe_browsing_mode == 1 && !is_mac) {
-      sources -= [
-        # These tests depend on single process mode, which is disabled in
-        # official builds.
-        "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-      ]
-    }
 
     if (use_aura) {
       if (enable_wifi_display) {
@@ -3360,7 +3307,6 @@ test("unit_tests") {
     "../browser/ui/autofill/popup_view_test_helpers.cc",
     "../browser/ui/autofill/popup_view_test_helpers.h",
     "../browser/ui/blocked_content/popup_opener_tab_helper_unittest.cc",
-    "../browser/ui/blocked_content/safe_browsing_triggered_popup_blocker_unittest.cc",
     "../browser/ui/chrome_select_file_policy_unittest.cc",
     "../browser/ui/find_bar/find_backend_unittest.cc",
     "../browser/ui/login/login_handler_unittest.cc",
@@ -3574,10 +3520,6 @@ test("unit_tests") {
     "//components/page_load_metrics/common:test_support",
     "//components/resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing:features",
-    "//components/safe_browsing/db",
-    "//components/safe_browsing/db:test_database_manager",
-    "//components/safe_browsing/password_protection:mock_password_protection",
     "//components/services/patch/content",
     "//components/services/unzip/content",
     "//components/spellcheck:buildflags",
@@ -3866,15 +3808,6 @@ test("unit_tests") {
       "../browser/profile_resetter/reset_report_uploader_unittest.cc",
       "../browser/profile_resetter/triggered_profile_resetter_win_unittest.cc",
       "../browser/renderer_context_menu/render_view_context_menu_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_fetcher_win_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_runner_win_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/chrome_prompt_channel_win_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.cc",
-      "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.h",
-      "../browser/safe_browsing/chrome_cleaner/reporter_runner_win_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/srt_delete_extension_win_unittest.cc",
-      "../browser/safe_browsing/chrome_cleaner/srt_field_trial_win_unittest.cc",
       "../browser/search/background/ntp_background_service_unittest.cc",
       "../browser/search/chrome_colors/chrome_colors_service_unittest.cc",
       "../browser/search/instant_service_unittest.cc",
@@ -4391,9 +4324,6 @@ test("unit_tests") {
       "../browser/extensions/api/preference/preference_api_prefs_unittest.cc",
       "../browser/extensions/api/proxy/proxy_api_helpers_unittest.cc",
       "../browser/extensions/api/runtime/chrome_runtime_api_delegate_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_api_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_util_unittest.cc",
       "../browser/extensions/api/signed_in_devices/id_mapping_helper_unittest.cc",
       "../browser/extensions/api/signed_in_devices/signed_in_devices_api_unittest.cc",
       "../browser/extensions/api/signed_in_devices/signed_in_devices_manager_unittest.cc",
@@ -4502,12 +4432,6 @@ test("unit_tests") {
       "../browser/notifications/notification_system_observer_unittest.cc",
       "../browser/policy/chrome_extension_policy_migrator_unittest.cc",
       "../browser/renderer_context_menu/context_menu_content_type_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
-      "../browser/safe_browsing/test_extension_event_observer.cc",
-      "../browser/safe_browsing/test_extension_event_observer.h",
 
       # TODO(1026557): The below test depends on TestExtensionEventObserver.
       # Maybe it should be changed to not use that class so that it could be
@@ -4755,100 +4679,6 @@ test("unit_tests") {
     }
   }
 
-  if (safe_browsing_mode > 0) {
-    sources += [
-      "../browser/safe_browsing/certificate_reporting_service_unittest.cc",
-      "../browser/safe_browsing/safe_browsing_blocking_page_unittest.cc",
-      "../browser/safe_browsing/threat_details_unittest.cc",
-      "../browser/safe_browsing/ui_manager_unittest.cc",
-      "../common/safe_browsing/file_type_policies_test_util.cc",
-      "../common/safe_browsing/file_type_policies_test_util.h",
-      "../common/safe_browsing/file_type_policies_unittest.cc",
-    ]
-  }
-  if (safe_browsing_mode == 1) {
-    # TODO(sgurun): enable tests for safe_browsing==2.
-    sources += [
-      "../browser/safe_browsing/advanced_protection_status_manager_factory_unittest.cc",
-      "../browser/safe_browsing/advanced_protection_status_manager_unittest.cc",
-      "../browser/safe_browsing/browser_feature_extractor_unittest.cc",
-      "../browser/safe_browsing/chrome_password_protection_service_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_host_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_service_unittest.cc",
-      "../browser/safe_browsing/client_side_model_loader_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/binary_fcm_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/binary_upload_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_dialog_delegate_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_utils_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/multipart_uploader_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_feedback_service_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_feedback_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_item_request_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_protection_service_unittest.cc",
-      "../browser/safe_browsing/download_protection/file_analyzer_unittest.cc",
-      "../browser/safe_browsing/download_protection/path_sanitizer_unittest.cc",
-      "../browser/safe_browsing/download_protection/two_phase_uploader_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_mac_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_win_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/binary_integrity_incident_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/delayed_callback_runner_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/download_metadata_manager_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/environment_data_collection_win_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/incident_report_uploader_impl_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/mock_incident_receiver.cc",
-      "../browser/safe_browsing/incident_reporting/mock_incident_receiver.h",
-      "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.cc",
-      "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.h",
-      "../browser/safe_browsing/incident_reporting/module_integrity_verifier_win_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/platform_state_store_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/platform_state_store_win_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/preference_validation_delegate_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/resource_request_detector_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/state_store_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/tracked_preference_incident_unittest.cc",
-      "../browser/safe_browsing/local_two_phase_testserver.cc",
-      "../browser/safe_browsing/local_two_phase_testserver.h",
-      "../browser/safe_browsing/safe_browsing_navigation_observer_unittest.cc",
-      "../browser/safe_browsing/signature_evaluator_mac_unittest.cc",
-      "../common/safe_browsing/binary_feature_extractor_mac_unittest.cc",
-      "../common/safe_browsing/binary_feature_extractor_unittest.cc",
-      "../common/safe_browsing/binary_feature_extractor_win_unittest.cc",
-      "../common/safe_browsing/disk_image_type_sniffer_mac_unittest.cc",
-      "../common/safe_browsing/download_type_util_unittest.cc",
-      "../common/safe_browsing/ipc_protobuf_message_test_messages.h",
-      "../common/safe_browsing/ipc_protobuf_message_unittest.cc",
-      "../common/safe_browsing/mach_o_image_reader_mac_unittest.cc",
-      "../common/safe_browsing/pe_image_reader_win_unittest.cc",
-      "../renderer/safe_browsing/features_unittest.cc",
-      "../renderer/safe_browsing/murmurhash3_util_unittest.cc",
-      "../renderer/safe_browsing/phishing_term_feature_extractor_unittest.cc",
-      "../renderer/safe_browsing/phishing_url_feature_extractor_unittest.cc",
-      "../renderer/safe_browsing/scorer_unittest.cc",
-      "../utility/safe_browsing/mac/dmg_analyzer_unittest.cc",
-      "../utility/safe_browsing/mac/dmg_test_utils.cc",
-      "../utility/safe_browsing/mac/dmg_test_utils.h",
-      "../utility/safe_browsing/mac/hfs_unittest.cc",
-      "../utility/safe_browsing/mac/read_stream_unittest.cc",
-      "../utility/safe_browsing/mac/udif_unittest.cc",
-    ]
-    deps += [
-      ":test_proto",
-      "../common/safe_browsing:mock_binary_feature_extractor",
-      "//chrome/services/file_util/public/cpp:unit_tests",
-      "//components/safe_browsing:ping_manager_unittest",
-      "//components/safe_browsing/browser:unittests",
-      "//components/safe_browsing/db:v4_test_util",
-      "//components/safe_browsing/renderer:websocket_sb_handshake_throttle_unittest",
-      "//components/safe_browsing/triggers:ad_redirect_trigger",
-    ]
-  } else if (safe_browsing_mode == 2) {
-    sources += [ "../browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc" ]
-    deps += []
-  }
-
   if (enable_plugins) {
     sources += [
       "../browser/component_updater/component_installers_unittest.cc",
@@ -5053,10 +4883,6 @@ test("unit_tests") {
       "//third_party/wtl",
       "//ui/resources",
     ]
-    data_deps += [
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_1",
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_2",
-    ]
 
     libs = [
       "comsupp.lib",
@@ -5237,9 +5063,6 @@ test("unit_tests") {
       "//chrome/browser/supervised_user/supervised_user_error_page:unit_tests",
     ]
   }
-  if (safe_browsing_mode == 1 && enable_extensions) {
-    sources += [ "../browser/extensions/blacklist_unittest.cc" ]
-  }
 
   if (is_win || is_mac || (is_linux && !is_chromeos)) {
     sources += [
@@ -5391,14 +5214,6 @@ if (!is_android) {
     }
   }
 
-  import("//third_party/protobuf/proto_library.gni")
-
-  proto_library("test_proto") {
-    sources = [
-      "../common/safe_browsing/ipc_protobuf_message_test.proto",
-    ]
-  }
-
   if (is_chromeos) {
     assert(enable_extensions)
 
@@ -6489,27 +6304,6 @@ if (!is_android && !is_fuchsia) {
   }
 }
 
-if (is_win) {
-  fuzzer_test("safe_browsing_binary_feature_extractor_fuzzer") {
-    sources = [
-      "../common/safe_browsing/binary_feature_extractor.cc",
-      "../common/safe_browsing/binary_feature_extractor_fuzzer.cc",
-      "../common/safe_browsing/binary_feature_extractor_win.cc",
-      "../common/safe_browsing/pe_image_reader_win.cc",
-    ]
-    deps = [
-      "//base",
-      "//components/safe_browsing:csd_proto",
-      "//crypto",
-    ]
-    libs = [ "wintrust.lib" ]
-
-    # Directory contains useful and non-useful files. Don't worry about
-    # non-useful since they are eliminated during pruning.
-    seed_corpus = "data/safe_browsing/download_protection/"
-  }
-}
-
 if (is_chromeos) {
   fuzzer_test("tokenized_string_fuzzer") {
     sources = [
--- a/chrome/utility/BUILD.gn
+++ b/chrome/utility/BUILD.gn
@@ -203,13 +203,6 @@ static_library("utility") {
     }
   }
 
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/services/file_util" ]
-    if (is_mac) {
-      deps += [ "//chrome/utility/safe_browsing/mac" ]
-    }
-  }
-
   if (is_android || enable_extensions) {
     deps += [ "//chrome/services/media_gallery_util:lib" ]
   }
--- a/components/BUILD.gn
+++ b/components/BUILD.gn
@@ -259,10 +259,6 @@ test("components_unittests") {
       "//components/performance_manager:unit_tests",
       "//components/policy/content:unit_tests",
       "//components/previews/content:unit_tests",
-      "//components/safe_browsing/common:unit_tests",
-      "//components/safe_browsing/password_protection:password_protection_unittest",
-      "//components/safe_browsing/triggers:unit_tests",
-      "//components/safe_browsing/web_ui:unit_tests",
       "//components/security_interstitials/content:unit_tests",
       "//components/security_state/content:unit_tests",
       "//components/services/heap_profiling:unit_tests",
@@ -395,14 +391,6 @@ test("components_unittests") {
   if (enable_print_preview) {
     deps += [ "//components/pwg_encoder:unit_tests" ]
   }
-  if (safe_browsing_mode == 1) {
-    deps += [
-      "//components/safe_browsing:verdict_cache_manager_unittest",
-      "//components/safe_browsing/db:unit_tests_desktop",
-    ]
-  } else if (safe_browsing_mode == 2) {
-    deps += [ "//components/safe_browsing/android:unit_tests_mobile" ]
-  }
 
   if (!is_ios) {
     deps += [
@@ -687,11 +675,8 @@ if (!is_ios && !is_fuchsia) {
     }
 
     if (!is_android) {
-      sources += [ "safe_browsing/db/v4_store_perftest.cc" ]
+      sources += []
       deps += [
-        "//components/safe_browsing/db:v4_protocol_manager_util",
-        "//components/safe_browsing/db:v4_store",
-        "//components/safe_browsing/db:v4_test_util",
         "//crypto",
       ]
     }
--- a/components/components_strings.grd
+++ b/components/components_strings.grd
@@ -247,7 +247,6 @@
       <part file="print_media_strings.grdp" />
       <part file="printing_component_strings.grdp" />
       <part file="reset_password_strings.grdp" />
-      <part file="safe_browsing_strings.grdp" />
       <part file="security_interstitials_strings.grdp" />
       <part file="security_state_strings.grdp" />
       <part file="send_tab_to_self_strings.grdp" />
--- a/components/password_manager/core/browser/BUILD.gn
+++ b/components/password_manager/core/browser/BUILD.gn
@@ -300,7 +300,6 @@ jumbo_static_library("browser") {
       "http_credentials_cleaner.cc",
       "http_credentials_cleaner.h",
     ]
-    deps += [ "//components/safe_browsing/common:safe_browsing_prefs" ]
   }
 
   if ((is_posix && !is_mac && !is_ios) || is_fuchsia) {
@@ -651,10 +650,6 @@ source_set("unit_tests") {
     "//ui/gfx:test_support",
     "//url",
   ]
-
-  if (password_reuse_detection_support) {
-    deps += [ "//components/safe_browsing/common:safe_browsing_prefs" ]
-  }
 }
 
 fuzzer_test("csv_reader_fuzzer") {
--- a/components/password_manager/core/browser/password_manager_client.h
+++ b/components/password_manager/core/browser/password_manager_client.h
@@ -46,7 +46,7 @@ class IdentityManager;
 
 class GURL;
 
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
 namespace safe_browsing {
 class PasswordProtectionService;
 }
@@ -291,7 +291,7 @@ class PasswordManagerClient {
                                            const GURL& frame_url) = 0;
 #endif
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   // Checks the safe browsing reputation of the webpage where password reuse
   // happens. This is called by the PasswordReuseDetectionManager when a
   // protected password is typed on the wrong domain. This may trigger a
--- a/components/password_manager/core/browser/password_reuse_detector.cc
+++ b/components/password_manager/core/browser/password_reuse_detector.cc
@@ -157,15 +157,6 @@ PasswordReuseDetector::CheckNonGaiaEnter
     return base::nullopt;
   }
 
-  // Skips password reuse check if |domain| matches enterprise login URL or
-  // enterprise change password URL.
-  GURL page_url(domain);
-  if (enterprise_password_urls_.has_value() &&
-      safe_browsing::MatchesURLList(page_url,
-                                    enterprise_password_urls_.value())) {
-    return base::nullopt;
-  }
-
   return FindPasswordReuse(input, enterprise_password_hash_data_list_.value());
 }
 
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -565,10 +565,7 @@ void PasswordStore::SchedulePasswordHash
 
 void PasswordStore::ScheduleEnterprisePasswordURLUpdate() {
   std::vector<GURL> enterprise_login_urls;
-  safe_browsing::GetPasswordProtectionLoginURLsPref(*prefs_,
-                                                    &enterprise_login_urls);
-  GURL enterprise_change_password_url =
-      safe_browsing::GetPasswordProtectionChangePasswordURLPref(*prefs_);
+  GURL enterprise_change_password_url = GURL();
 
   ScheduleTask(base::BindRepeating(&PasswordStore::SaveEnterprisePasswordURLs,
                                    this, base::Passed(&enterprise_login_urls),
--- a/components/password_manager/core/browser/stub_password_manager_client.cc
+++ b/components/password_manager/core/browser/stub_password_manager_client.cc
@@ -96,32 +96,6 @@ StubPasswordManagerClient::GetMockPasswo
   return &password_feature_manager_;
 }
 
-#if defined(ON_FOCUS_PING_ENABLED) || \
-    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-safe_browsing::PasswordProtectionService*
-StubPasswordManagerClient::GetPasswordProtectionService() const {
-  return nullptr;
-}
-#endif
-
-#if defined(ON_FOCUS_PING_ENABLED)
-void StubPasswordManagerClient::CheckSafeBrowsingReputation(
-    const GURL& form_action,
-    const GURL& frame_url) {}
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-void StubPasswordManagerClient::CheckProtectedPasswordEntry(
-    metrics_util::PasswordType reused_password_type,
-    const std::string& username,
-    const std::vector<std::string>& matching_domains,
-    bool password_field_exists) {}
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
-void StubPasswordManagerClient::LogPasswordReuseDetectedEvent() {}
-#endif
-
 ukm::SourceId StubPasswordManagerClient::GetUkmSourceId() {
   return ukm_source_id_;
 }
--- a/components/password_manager/core/browser/stub_password_manager_client.h
+++ b/components/password_manager/core/browser/stub_password_manager_client.h
@@ -62,29 +62,6 @@ class StubPasswordManagerClient : public
   const PasswordFeatureManager* GetPasswordFeatureManager() const override;
   const MockPasswordFeatureManager* GetMockPasswordFeatureManager() const;
 
-#if defined(ON_FOCUS_PING_ENABLED) || \
-    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-  safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
-      const override;
-#endif
-
-#if defined(ON_FOCUS_PING_ENABLED)
-  void CheckSafeBrowsingReputation(const GURL& form_action,
-                                   const GURL& frame_url) override;
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-  void CheckProtectedPasswordEntry(
-      metrics_util::PasswordType reused_password_type,
-      const std::string& username,
-      const std::vector<std::string>& matching_domains,
-      bool password_field_exists) override;
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
-  void LogPasswordReuseDetectedEvent() override;
-#endif
-
   ukm::SourceId GetUkmSourceId() override;
   PasswordManagerMetricsRecorder* GetMetricsRecorder() override;
   signin::IdentityManager* GetIdentityManager() override;
--- a/components/search_engines/search_terms_data.cc
+++ b/components/search_engines/search_terms_data.cc
@@ -21,7 +21,7 @@ std::string SearchTermsData::GoogleBaseU
 std::string SearchTermsData::GoogleBaseSuggestURLValue() const {
   // Start with the Google base URL.
   const GURL base_url(GoogleBaseURLValue());
-  DCHECK(base_url.is_valid());
+  //DCHECK(base_url.is_valid());
 
   GURL::Replacements repl;
 
--- a/components/security_interstitials/content/unsafe_resource.cc
+++ b/components/security_interstitials/content/unsafe_resource.cc
@@ -26,9 +26,7 @@ content::WebContents* GetWebContentsByFr
 
 UnsafeResource::UnsafeResource()
     : is_subresource(false),
-      is_subframe(false),
-      threat_type(safe_browsing::SB_THREAT_TYPE_SAFE),
-      threat_source(safe_browsing::ThreatSource::UNKNOWN) {}
+      is_subframe(false) {}
 
 UnsafeResource::UnsafeResource(
     const UnsafeResource& other) = default;
@@ -36,41 +34,7 @@ UnsafeResource::UnsafeResource(
 UnsafeResource::~UnsafeResource() {}
 
 bool UnsafeResource::IsMainPageLoadBlocked() const {
-  // Subresource hits cannot happen until after main page load is committed.
-  if (is_subresource)
-    return false;
-
-  switch (threat_type) {
-    // Client-side phishing/malware detection interstitials never block the main
-    // frame load, since they happen after the page is finished loading.
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING:
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE:
-    // Malicious ad activity reporting happens in the background.
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_POPUP:
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_REDIRECT:
-    // Ad sampling happens in the background.
-    case safe_browsing::SB_THREAT_TYPE_AD_SAMPLE:
-    // Chrome SAVED password reuse warning happens after the page is finished
-    // loading.
-    case safe_browsing::SB_THREAT_TYPE_SAVED_PASSWORD_REUSE:
-    // Chrome GAIA signed in and syncing password reuse warning happens after
-    // the page is finished loading.
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_SYNC_PASSWORD_REUSE:
-    // Chrome GAIA signed in and non-syncing password reuse warning happens
-    // after the page is finished loading.
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_NON_SYNC_PASSWORD_REUSE:
-    // Enterprise password reuse warning happens after the page is finished
-    // loading.
-    case safe_browsing::SB_THREAT_TYPE_ENTERPRISE_PASSWORD_REUSE:
-    // Suspicious site collection happens in the background
-    case safe_browsing::SB_THREAT_TYPE_SUSPICIOUS_SITE:
-      return false;
-
-    default:
-      break;
-  }
-
-  return true;
+  return false;
 }
 
 content::NavigationEntry*
--- a/components/security_interstitials/content/unsafe_resource.h
+++ b/components/security_interstitials/content/unsafe_resource.h
@@ -10,8 +10,6 @@
 #include "base/callback.h"
 #include "base/memory/ref_counted.h"
 #include "base/single_thread_task_runner.h"
-#include "components/safe_browsing/db/hit_report.h"
-#include "components/safe_browsing/db/util.h"
 #include "url/gurl.h"
 
 namespace content {
@@ -63,12 +61,9 @@ struct UnsafeResource {
   std::vector<GURL> redirect_urls;
   bool is_subresource;
   bool is_subframe;
-  safe_browsing::SBThreatType threat_type;
-  safe_browsing::ThreatMetadata threat_metadata;
   UrlCheckCallback callback;  // This is called back on |callback_thread|.
   scoped_refptr<base::SingleThreadTaskRunner> callback_thread;
   base::Callback<content::WebContents*(void)> web_contents_getter;
-  safe_browsing::ThreatSource threat_source;
   // |token| field is only set if |threat_type| is
   // SB_THREAT_TYPE_*_PASSWORD_REUSE.
   std::string token;
--- a/components/subresource_filter/content/browser/BUILD.gn
+++ b/components/subresource_filter/content/browser/BUILD.gn
@@ -29,20 +29,12 @@ static_library("browser") {
     "subresource_filter_observer.h",
     "subresource_filter_observer_manager.cc",
     "subresource_filter_observer_manager.h",
-    "subresource_filter_safe_browsing_activation_throttle.cc",
-    "subresource_filter_safe_browsing_activation_throttle.h",
-    "subresource_filter_safe_browsing_client.cc",
-    "subresource_filter_safe_browsing_client.h",
-    "subresource_filter_safe_browsing_client_request.cc",
-    "subresource_filter_safe_browsing_client_request.h",
     "verified_ruleset_dealer.cc",
     "verified_ruleset_dealer.h",
   ]
   deps = [
     "//base",
     "//components/prefs:prefs",
-    "//components/safe_browsing/db:database_manager",
-    "//components/safe_browsing/db:util",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/common",
@@ -65,8 +57,6 @@ static_library("test_support") {
   sources = [
     "async_document_subresource_filter_test_utils.cc",
     "async_document_subresource_filter_test_utils.h",
-    "fake_safe_browsing_database_manager.cc",
-    "fake_safe_browsing_database_manager.h",
     "subframe_navigation_test_utils.cc",
     "subframe_navigation_test_utils.h",
     "subresource_filter_observer_test_utils.cc",
@@ -83,8 +73,6 @@ static_library("test_support") {
     "//url",
   ]
   public_deps = [
-    "//components/safe_browsing/db:test_database_manager",
-    "//components/safe_browsing/db:util",
   ]
 }
 
@@ -99,7 +87,6 @@ source_set("unit_tests") {
     "ruleset_publisher_impl_unittest.cc",
     "ruleset_service_unittest.cc",
     "subframe_navigation_filtering_throttle_unittest.cc",
-    "subresource_filter_safe_browsing_activation_throttle_unittest.cc",
     "verified_ruleset_dealer_unittest.cc",
   ]
   deps = [
@@ -107,7 +94,6 @@ source_set("unit_tests") {
     ":test_support",
     "//base/test:test_support",
     "//components/prefs:test_support",
-    "//components/safe_browsing/db:util",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/browser:test_support",
--- a/testing/variations/fieldtrial_testing_config.json
+++ b/testing/variations/fieldtrial_testing_config.json
@@ -5384,323 +5384,6 @@
             ]
         }
     ],
-    "SafeBrowsingAdPopupTrigger": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "params": {
-                        "ad_popup_trigger_quota": "10"
-                    },
-                    "enable_features": [
-                        "SafeBrowsingAdPopupTrigger"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingAdRedirectTrigger": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "params": {
-                        "ad_redirect_trigger_quota": "10"
-                    },
-                    "enable_features": [
-                        "SafeBrowsingAdRedirectTrigger"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingAdSamplerTrigger": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "AdSampler_NormalRate",
-                    "params": {
-                        "safe_browsing_ad_sampler_frequency_denominator": "1000",
-                        "trigger_type_and_quota_csv": "2,10"
-                    },
-                    "enable_features": [
-                        "SafeBrowsingAdSamplerTrigger",
-                        "SafeBrowsingTriggerThrottlerDailyQuota"
-                    ]
-                },
-                {
-                    "name": "Control",
-                    "disable_features": [
-                        "SafeBrowsingAdSamplerTrigger",
-                        "SafeBrowsingTriggerThrottlerDailyQuota"
-                    ]
-                },
-                {
-                    "name": "Default"
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "params": {
-                        "enabled": "true",
-                        "types_to_check": "0,1,3,6,7,8,9,10,11,13,14,15"
-                    }
-                },
-                {
-                    "name": "Control"
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionForSavedPasswords": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionForSavedPasswords"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionForSignedInUsers": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionForSignedInUsers"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionOnFocusPingAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingSendOnFocusPing"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionPasswordReusePingAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingSendPasswordReusePing"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionShowDomainsForSavedPasswords": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionShowDomainsForSavedPasswords"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingRealTimeUrlLookupEnabled": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingRealTimeUrlLookupEnabled"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingScoutTransitionStudy": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "CanShowScoutOptInGroup2",
-                    "enable_features": [
-                        "CanShowScoutOptIn"
-                    ]
-                },
-                {
-                    "name": "Control2",
-                    "disable_features": [
-                        "CanShowScoutOptIn",
-                        "OnlyShowScoutOptIn"
-                    ]
-                },
-                {
-                    "name": "Default"
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingSendSampledPingsForAllowlistDomain": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingSendSampledPingsForAllowlistDomain"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingSuspiciousSiteTrigger": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "params": {
-                        "suspicious_site_trigger_quota": "10"
-                    },
-                    "enable_features": [
-                        "SafeBrowsingSuspiciousSiteTriggerQuota"
-                    ]
-                },
-                {
-                    "name": "Control",
-                    "disable_features": [
-                        "SafeBrowsingSuspiciousSiteTriggerQuota"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingThreatDomDetailsTagAttributes": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "AdIdentifiers",
-                    "params": {
-                        "tag_attribute_csv": "div,data-google-query-id,div,id,iframe,id"
-                    },
-                    "enable_features": [
-                        "ThreatDomDetailsTagAttributes"
-                    ]
-                },
-                {
-                    "name": "Default"
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingUseLocalBlacklistsV2": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "params": {
-                        "local_blacklists_update_interval_in_secs": "900"
-                    },
-                    "enable_features": [
-                        "SafeBrowsingUseLocalBlacklistsV2"
-                    ]
-                }
-            ]
-        }
-    ],
     "SameSiteByDefaultCookies_AndroidAw": [
         {
             "platforms": [
@@ -6843,25 +6526,6 @@
                     ]
                 }
             ]
-        }
-    ],
-    "URLLoaderThrottleSafeBrowsingChecks": [
-        {
-            "platforms": [
-                "windows",
-                "mac",
-                "chromeos",
-                "linux",
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "URLLoaderThrottleSafeBrowsingChecksEnabled",
-                    "enable_features": [
-                        "S13nSafeBrowsingCheckByURLLoaderThrottle"
-                    ]
-                }
-            ]
         }
     ],
     "UmaAndUkmDemographics": [
--- a/third_party/unrar/BUILD.gn
+++ b/third_party/unrar/BUILD.gn
@@ -20,87 +20,3 @@ config("unrar_warnings") {
     "-Wno-missing-braces",
   ]
 }
-
-static_library("unrar") {
-  sources = [
-    "src/archive.cpp",
-    "src/arcread.cpp",
-    "src/blake2s.cpp",
-    "src/cmddata.cpp",
-    "src/consio.cpp",
-    "src/crc.cpp",
-    "src/crypt.cpp",
-    "src/encname.cpp",
-    "src/errhnd.cpp",
-    "src/extinfo.cpp",
-    "src/extract.cpp",
-    "src/filcreat.cpp",
-    "src/file.cpp",
-    "src/filefn.cpp",
-    "src/filestr.cpp",
-    "src/find.cpp",
-    "src/getbits.cpp",
-    "src/global.cpp",
-    "src/hash.cpp",
-    "src/headers.cpp",
-    "src/list.cpp",
-    "src/match.cpp",
-    "src/options.cpp",
-    "src/pathfn.cpp",
-    "src/qopen.cpp",
-    "src/rarvm.cpp",
-    "src/rawread.cpp",
-    "src/rdwrfn.cpp",
-    "src/recvol.cpp",
-    "src/resource.cpp",
-    "src/rijndael.cpp",
-    "src/rs.cpp",
-    "src/rs16.cpp",
-    "src/scantree.cpp",
-    "src/secpassword.cpp",
-    "src/sha1.cpp",
-    "src/sha256.cpp",
-    "src/smallfn.cpp",
-    "src/strfn.cpp",
-    "src/strlist.cpp",
-    "src/system.cpp",
-    "src/threadpool.cpp",
-    "src/timefn.cpp",
-    "src/ui.cpp",
-    "src/unicode.cpp",
-    "src/unpack.cpp",
-    "src/unrar_wrapper.cc",
-    "src/volume.cpp",
-  ]
-  if (is_win) {
-    sources += [ "src/isnt.cpp" ]
-  }
-
-  configs -= [ "//build/config/compiler:chromium_code" ]
-  configs += [
-    "//build/config/compiler:no_chromium_code",
-
-    # This must be after no_chromium_code for warning flags to be ordered
-    # correctly.
-    ":unrar_warnings",
-  ]
-
-  defines = [
-    "_FILE_OFFSET_BITS=64",
-    "LARGEFILE_SOURCE",
-    "RAR_SMP",
-    "SILENT",
-    "NOVOLUME",
-
-    # The following is set to disable certain macro definitions in the unrar
-    # source code.
-    "CHROMIUM_UNRAR",
-
-    # Disables exceptions in unrar, replaces them with process termination.
-    "UNRAR_NO_EXCEPTIONS",
-  ]
-
-  deps = [
-    "//base",
-  ]
-}
--- a/tools/ipc_fuzzer/message_lib/BUILD.gn
+++ b/tools/ipc_fuzzer/message_lib/BUILD.gn
@@ -11,10 +11,8 @@ static_library("ipc_message_lib") {
   public_deps = [
     "//base",
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/guest_view/common",
     "//components/nacl/common:buildflags",
-    "//components/safe_browsing/common",
     "//components/spellcheck/common",
     "//components/subresource_filter/content/common",
     "//components/tracing",
--- a/chrome/browser/extensions/crx_installer.cc
+++ b/chrome/browser/extensions/crx_installer.cc
@@ -615,12 +615,9 @@

   policy_check_ = std::make_unique<PolicyCheck>(profile_, extension());
   requirements_check_ = std::make_unique<RequirementsChecker>(extension());
-  blacklist_check_ =
-      std::make_unique<BlacklistCheck>(Blacklist::Get(profile_), extension_);

   check_group_->AddCheck(policy_check_.get());
   check_group_->AddCheck(requirements_check_.get());
-  check_group_->AddCheck(blacklist_check_.get());

   check_group_->Start(
       base::BindOnce(&CrxInstaller::OnInstallChecksComplete, this));
